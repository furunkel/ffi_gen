# Generated by ffi_gen. Please do not change this file by hand.

require 'ffi'

module GL
  extend FFI::Library
  ffi_lib "GL"
  
  VERSION_1_1 = 1
  
  VERSION_1_2 = 1
  
  VERSION_1_3 = 1
  
  ARB_IMAGING = 1
  
  _FALSE = 0x0
  
  _TRUE = 0x1
  
  BYTE = 0x1400
  
  UNSIGNED_BYTE = 0x1401
  
  SHORT = 0x1402
  
  UNSIGNED_SHORT = 0x1403
  
  INT = 0x1404
  
  UNSIGNED_INT = 0x1405
  
  FLOAT = 0x1406
  
  _2_BYTES = 0x1407
  
  _3_BYTES = 0x1408
  
  _4_BYTES = 0x1409
  
  DOUBLE = 0x140
  
  POINTS = 0x0000
  
  LINES = 0x0001
  
  LINE_LOOP = 0x0002
  
  LINE_STRIP = 0x0003
  
  TRIANGLES = 0x0004
  
  TRIANGLE_STRIP = 0x0005
  
  TRIANGLE_FAN = 0x0006
  
  QUADS = 0x0007
  
  QUAD_STRIP = 0x0008
  
  POLYGON = 0x0009
  
  VERTEX_ARRAY = 0x8074
  
  NORMAL_ARRAY = 0x8075
  
  COLOR_ARRAY = 0x8076
  
  INDEX_ARRAY = 0x8077
  
  TEXTURE_COORD_ARRAY = 0x8078
  
  EDGE_FLAG_ARRAY = 0x8079
  
  VERTEX_ARRAY_SIZE = 0x807
  
  VERTEX_ARRAY_TYPE = 0x807
  
  VERTEX_ARRAY_STRIDE = 0x807
  
  NORMAL_ARRAY_TYPE = 0x807
  
  NORMAL_ARRAY_STRIDE = 0x807
  
  COLOR_ARRAY_SIZE = 0x8081
  
  COLOR_ARRAY_TYPE = 0x8082
  
  COLOR_ARRAY_STRIDE = 0x8083
  
  INDEX_ARRAY_TYPE = 0x8085
  
  INDEX_ARRAY_STRIDE = 0x8086
  
  TEXTURE_COORD_ARRAY_SIZE = 0x8088
  
  TEXTURE_COORD_ARRAY_TYPE = 0x8089
  
  TEXTURE_COORD_ARRAY_STRIDE = 0x808
  
  EDGE_FLAG_ARRAY_STRIDE = 0x808
  
  VERTEX_ARRAY_POINTER = 0x808
  
  NORMAL_ARRAY_POINTER = 0x808
  
  COLOR_ARRAY_POINTER = 0x8090
  
  INDEX_ARRAY_POINTER = 0x8091
  
  TEXTURE_COORD_ARRAY_POINTER = 0x8092
  
  EDGE_FLAG_ARRAY_POINTER = 0x8093
  
  V2F = 0x2A20
  
  V3F = 0x2A21
  
  C4UB_V2F = 0x2A22
  
  C4UB_V3F = 0x2A23
  
  C3F_V3F = 0x2A24
  
  N3F_V3F = 0x2A25
  
  C4F_N3F_V3F = 0x2A26
  
  T2F_V3F = 0x2A27
  
  T4F_V4F = 0x2A28
  
  T2F_C4UB_V3F = 0x2A29
  
  T2F_C3F_V3F = 0x2A2
  
  T2F_N3F_V3F = 0x2A2
  
  T2F_C4F_N3F_V3F = 0x2A2
  
  T4F_C4F_N3F_V4F = 0x2A2
  
  MATRIX_MODE = 0x0BA0
  
  MODELVIEW = 0x1700
  
  PROJECTION = 0x1701
  
  TEXTURE = 0x1702
  
  POINT_SMOOTH = 0x0B10
  
  POINT_SIZE = 0x0B11
  
  POINT_SIZE_GRANULARITY = 0x0B13
  
  POINT_SIZE_RANGE = 0x0B12
  
  LINE_SMOOTH = 0x0B20
  
  LINE_STIPPLE = 0x0B24
  
  LINE_STIPPLE_PATTERN = 0x0B25
  
  LINE_STIPPLE_REPEAT = 0x0B26
  
  LINE_WIDTH = 0x0B21
  
  LINE_WIDTH_GRANULARITY = 0x0B23
  
  LINE_WIDTH_RANGE = 0x0B22
  
  POINT = 0x1B00
  
  LINE = 0x1B01
  
  FILL = 0x1B02
  
  CW = 0x0900
  
  CCW = 0x0901
  
  FRONT = 0x0404
  
  BACK = 0x0405
  
  POLYGON_MODE = 0x0B40
  
  POLYGON_SMOOTH = 0x0B41
  
  POLYGON_STIPPLE = 0x0B42
  
  EDGE_FLAG = 0x0B43
  
  CULL_FACE = 0x0B44
  
  CULL_FACE_MODE = 0x0B45
  
  FRONT_FACE = 0x0B46
  
  POLYGON_OFFSET_FACTOR = 0x8038
  
  POLYGON_OFFSET_UNITS = 0x2A00
  
  POLYGON_OFFSET_POINT = 0x2A01
  
  POLYGON_OFFSET_LINE = 0x2A02
  
  POLYGON_OFFSET_FILL = 0x8037
  
  COMPILE = 0x1300
  
  COMPILE_AND_EXECUTE = 0x1301
  
  LIST_BASE = 0x0B32
  
  LIST_INDEX = 0x0B33
  
  LIST_MODE = 0x0B30
  
  NEVER = 0x0200
  
  LESS = 0x0201
  
  EQUAL = 0x0202
  
  LEQUAL = 0x0203
  
  GREATER = 0x0204
  
  NOTEQUAL = 0x0205
  
  GEQUAL = 0x0206
  
  ALWAYS = 0x0207
  
  DEPTH_TEST = 0x0B71
  
  DEPTH_BITS = 0x0D56
  
  DEPTH_CLEAR_VALUE = 0x0B73
  
  DEPTH_FUNC = 0x0B74
  
  DEPTH_RANGE = 0x0B70
  
  DEPTH_WRITEMASK = 0x0B72
  
  DEPTH_COMPONENT = 0x1902
  
  LIGHTING = 0x0B50
  
  LIGHT0 = 0x4000
  
  LIGHT1 = 0x4001
  
  LIGHT2 = 0x4002
  
  LIGHT3 = 0x4003
  
  LIGHT4 = 0x4004
  
  LIGHT5 = 0x4005
  
  LIGHT6 = 0x4006
  
  LIGHT7 = 0x4007
  
  SPOT_EXPONENT = 0x1205
  
  SPOT_CUTOFF = 0x1206
  
  CONSTANT_ATTENUATION = 0x1207
  
  LINEAR_ATTENUATION = 0x1208
  
  QUADRATIC_ATTENUATION = 0x1209
  
  AMBIENT = 0x1200
  
  DIFFUSE = 0x1201
  
  SPECULAR = 0x1202
  
  SHININESS = 0x1601
  
  EMISSION = 0x1600
  
  POSITION = 0x1203
  
  SPOT_DIRECTION = 0x1204
  
  AMBIENT_AND_DIFFUSE = 0x1602
  
  COLOR_INDEXES = 0x1603
  
  LIGHT_MODEL_TWO_SIDE = 0x0B52
  
  LIGHT_MODEL_LOCAL_VIEWER = 0x0B51
  
  LIGHT_MODEL_AMBIENT = 0x0B53
  
  FRONT_AND_BACK = 0x0408
  
  SHADE_MODEL = 0x0B54
  
  FLAT = 0x1D00
  
  SMOOTH = 0x1D01
  
  COLOR_MATERIAL = 0x0B57
  
  COLOR_MATERIAL_FACE = 0x0B55
  
  COLOR_MATERIAL_PARAMETER = 0x0B56
  
  NORMALIZE = 0x0BA1
  
  CLIP_PLANE0 = 0x3000
  
  CLIP_PLANE1 = 0x3001
  
  CLIP_PLANE2 = 0x3002
  
  CLIP_PLANE3 = 0x3003
  
  CLIP_PLANE4 = 0x3004
  
  CLIP_PLANE5 = 0x3005
  
  ACCUM_RED_BITS = 0x0D58
  
  ACCUM_GREEN_BITS = 0x0D59
  
  ACCUM_BLUE_BITS = 0x0D5
  
  ACCUM_ALPHA_BITS = 0x0D5
  
  ACCUM_CLEAR_VALUE = 0x0B80
  
  ACCUM = 0x0100
  
  ADD = 0x0104
  
  LOAD = 0x0101
  
  MULT = 0x0103
  
  _RETURN = 0x0102
  
  ALPHA_TEST = 0x0BC0
  
  ALPHA_TEST_REF = 0x0BC2
  
  ALPHA_TEST_FUNC = 0x0BC1
  
  BLEND = 0x0BE2
  
  BLEND_SRC = 0x0BE1
  
  BLEND_DST = 0x0BE0
  
  ZERO = 0x0
  
  ONE = 0x1
  
  SRC_COLOR = 0x0300
  
  ONE_MINUS_SRC_COLOR = 0x0301
  
  SRC_ALPHA = 0x0302
  
  ONE_MINUS_SRC_ALPHA = 0x0303
  
  DST_ALPHA = 0x0304
  
  ONE_MINUS_DST_ALPHA = 0x0305
  
  DST_COLOR = 0x0306
  
  ONE_MINUS_DST_COLOR = 0x0307
  
  SRC_ALPHA_SATURATE = 0x0308
  
  FEEDBACK = 0x1C01
  
  RENDER = 0x1C00
  
  SELECT = 0x1C02
  
  _2D = 0x0600
  
  _3D = 0x0601
  
  _3D_COLOR = 0x0602
  
  _3D_COLOR_TEXTURE = 0x0603
  
  _4D_COLOR_TEXTURE = 0x0604
  
  POINT_TOKEN = 0x0701
  
  LINE_TOKEN = 0x0702
  
  LINE_RESET_TOKEN = 0x0707
  
  POLYGON_TOKEN = 0x0703
  
  BITMAP_TOKEN = 0x0704
  
  DRAW_PIXEL_TOKEN = 0x0705
  
  COPY_PIXEL_TOKEN = 0x0706
  
  PASS_THROUGH_TOKEN = 0x0700
  
  FEEDBACK_BUFFER_POINTER = 0x0DF0
  
  FEEDBACK_BUFFER_SIZE = 0x0DF1
  
  FEEDBACK_BUFFER_TYPE = 0x0DF2
  
  SELECTION_BUFFER_POINTER = 0x0DF3
  
  SELECTION_BUFFER_SIZE = 0x0DF4
  
  FOG = 0x0B60
  
  FOG_MODE = 0x0B65
  
  FOG_DENSITY = 0x0B62
  
  FOG_COLOR = 0x0B66
  
  FOG_INDEX = 0x0B61
  
  FOG_START = 0x0B63
  
  FOG_END = 0x0B64
  
  LINEAR = 0x2601
  
  EXP = 0x0800
  
  EXP2 = 0x0801
  
  LOGIC_OP = 0x0BF1
  
  INDEX_LOGIC_OP = 0x0BF1
  
  COLOR_LOGIC_OP = 0x0BF2
  
  LOGIC_OP_MODE = 0x0BF0
  
  CLEAR = 0x1500
  
  SET = 0x150
  
  COPY = 0x1503
  
  COPY_INVERTED = 0x150
  
  NOOP = 0x1505
  
  INVERT = 0x150
  
  _AND = 0x1501
  
  NAND = 0x150
  
  _OR = 0x1507
  
  NOR = 0x1508
  
  XOR = 0x1506
  
  EQUIV = 0x1509
  
  AND_REVERSE = 0x1502
  
  AND_INVERTED = 0x1504
  
  OR_REVERSE = 0x150
  
  OR_INVERTED = 0x150
  
  STENCIL_BITS = 0x0D57
  
  STENCIL_TEST = 0x0B90
  
  STENCIL_CLEAR_VALUE = 0x0B91
  
  STENCIL_FUNC = 0x0B92
  
  STENCIL_VALUE_MASK = 0x0B93
  
  STENCIL_FAIL = 0x0B94
  
  STENCIL_PASS_DEPTH_FAIL = 0x0B95
  
  STENCIL_PASS_DEPTH_PASS = 0x0B96
  
  STENCIL_REF = 0x0B97
  
  STENCIL_WRITEMASK = 0x0B98
  
  STENCIL_INDEX = 0x1901
  
  KEEP = 0x1E00
  
  REPLACE = 0x1E01
  
  INCR = 0x1E02
  
  DECR = 0x1E03
  
  NONE = 0x0
  
  LEFT = 0x0406
  
  RIGHT = 0x0407
  
  FRONT_LEFT = 0x0400
  
  FRONT_RIGHT = 0x0401
  
  BACK_LEFT = 0x0402
  
  BACK_RIGHT = 0x0403
  
  AUX0 = 0x0409
  
  AUX1 = 0x040
  
  AUX2 = 0x040
  
  AUX3 = 0x040
  
  COLOR_INDEX = 0x1900
  
  RED = 0x1903
  
  GREEN = 0x1904
  
  BLUE = 0x1905
  
  ALPHA = 0x1906
  
  LUMINANCE = 0x1909
  
  LUMINANCE_ALPHA = 0x190
  
  ALPHA_BITS = 0x0D55
  
  RED_BITS = 0x0D52
  
  GREEN_BITS = 0x0D53
  
  BLUE_BITS = 0x0D54
  
  INDEX_BITS = 0x0D51
  
  SUBPIXEL_BITS = 0x0D50
  
  AUX_BUFFERS = 0x0C00
  
  READ_BUFFER = 0x0C02
  
  DRAW_BUFFER = 0x0C01
  
  DOUBLEBUFFER = 0x0C32
  
  STEREO = 0x0C33
  
  BITMAP = 0x1A00
  
  COLOR = 0x1800
  
  DEPTH = 0x1801
  
  STENCIL = 0x1802
  
  DITHER = 0x0BD0
  
  RGB = 0x1907
  
  RGBA = 0x1908
  
  MAX_LIST_NESTING = 0x0B31
  
  MAX_EVAL_ORDER = 0x0D30
  
  MAX_LIGHTS = 0x0D31
  
  MAX_CLIP_PLANES = 0x0D32
  
  MAX_TEXTURE_SIZE = 0x0D33
  
  MAX_PIXEL_MAP_TABLE = 0x0D34
  
  MAX_ATTRIB_STACK_DEPTH = 0x0D35
  
  MAX_MODELVIEW_STACK_DEPTH = 0x0D36
  
  MAX_NAME_STACK_DEPTH = 0x0D37
  
  MAX_PROJECTION_STACK_DEPTH = 0x0D38
  
  MAX_TEXTURE_STACK_DEPTH = 0x0D39
  
  MAX_VIEWPORT_DIMS = 0x0D3
  
  MAX_CLIENT_ATTRIB_STACK_DEPTH = 0x0D3
  
  ATTRIB_STACK_DEPTH = 0x0BB0
  
  CLIENT_ATTRIB_STACK_DEPTH = 0x0BB1
  
  COLOR_CLEAR_VALUE = 0x0C22
  
  COLOR_WRITEMASK = 0x0C23
  
  CURRENT_INDEX = 0x0B01
  
  CURRENT_COLOR = 0x0B00
  
  CURRENT_NORMAL = 0x0B02
  
  CURRENT_RASTER_COLOR = 0x0B04
  
  CURRENT_RASTER_DISTANCE = 0x0B09
  
  CURRENT_RASTER_INDEX = 0x0B05
  
  CURRENT_RASTER_POSITION = 0x0B07
  
  CURRENT_RASTER_TEXTURE_COORDS = 0x0B06
  
  CURRENT_RASTER_POSITION_VALID = 0x0B08
  
  CURRENT_TEXTURE_COORDS = 0x0B03
  
  INDEX_CLEAR_VALUE = 0x0C20
  
  INDEX_MODE = 0x0C30
  
  INDEX_WRITEMASK = 0x0C21
  
  MODELVIEW_MATRIX = 0x0BA6
  
  MODELVIEW_STACK_DEPTH = 0x0BA3
  
  NAME_STACK_DEPTH = 0x0D70
  
  PROJECTION_MATRIX = 0x0BA7
  
  PROJECTION_STACK_DEPTH = 0x0BA4
  
  RENDER_MODE = 0x0C40
  
  RGBA_MODE = 0x0C31
  
  TEXTURE_MATRIX = 0x0BA8
  
  TEXTURE_STACK_DEPTH = 0x0BA5
  
  VIEWPORT = 0x0BA2
  
  AUTO_NORMAL = 0x0D80
  
  MAP1_COLOR_4 = 0x0D90
  
  MAP1_INDEX = 0x0D91
  
  MAP1_NORMAL = 0x0D92
  
  MAP1_TEXTURE_COORD_1 = 0x0D93
  
  MAP1_TEXTURE_COORD_2 = 0x0D94
  
  MAP1_TEXTURE_COORD_3 = 0x0D95
  
  MAP1_TEXTURE_COORD_4 = 0x0D96
  
  MAP1_VERTEX_3 = 0x0D97
  
  MAP1_VERTEX_4 = 0x0D98
  
  MAP2_COLOR_4 = 0x0DB0
  
  MAP2_INDEX = 0x0DB1
  
  MAP2_NORMAL = 0x0DB2
  
  MAP2_TEXTURE_COORD_1 = 0x0DB3
  
  MAP2_TEXTURE_COORD_2 = 0x0DB4
  
  MAP2_TEXTURE_COORD_3 = 0x0DB5
  
  MAP2_TEXTURE_COORD_4 = 0x0DB6
  
  MAP2_VERTEX_3 = 0x0DB7
  
  MAP2_VERTEX_4 = 0x0DB8
  
  MAP1_GRID_DOMAIN = 0x0DD0
  
  MAP1_GRID_SEGMENTS = 0x0DD1
  
  MAP2_GRID_DOMAIN = 0x0DD2
  
  MAP2_GRID_SEGMENTS = 0x0DD3
  
  COEFF = 0x0A00
  
  ORDER = 0x0A01
  
  DOMAIN = 0x0A02
  
  PERSPECTIVE_CORRECTION_HINT = 0x0C50
  
  POINT_SMOOTH_HINT = 0x0C51
  
  LINE_SMOOTH_HINT = 0x0C52
  
  POLYGON_SMOOTH_HINT = 0x0C53
  
  FOG_HINT = 0x0C54
  
  DONT_CARE = 0x1100
  
  FASTEST = 0x1101
  
  NICEST = 0x1102
  
  SCISSOR_BOX = 0x0C10
  
  SCISSOR_TEST = 0x0C11
  
  MAP_COLOR = 0x0D10
  
  MAP_STENCIL = 0x0D11
  
  INDEX_SHIFT = 0x0D12
  
  INDEX_OFFSET = 0x0D13
  
  RED_SCALE = 0x0D14
  
  RED_BIAS = 0x0D15
  
  GREEN_SCALE = 0x0D18
  
  GREEN_BIAS = 0x0D19
  
  BLUE_SCALE = 0x0D1
  
  BLUE_BIAS = 0x0D1
  
  ALPHA_SCALE = 0x0D1
  
  ALPHA_BIAS = 0x0D1
  
  DEPTH_SCALE = 0x0D1
  
  DEPTH_BIAS = 0x0D1
  
  PIXEL_MAP_S_TO_S_SIZE = 0x0CB1
  
  PIXEL_MAP_I_TO_I_SIZE = 0x0CB0
  
  PIXEL_MAP_I_TO_R_SIZE = 0x0CB2
  
  PIXEL_MAP_I_TO_G_SIZE = 0x0CB3
  
  PIXEL_MAP_I_TO_B_SIZE = 0x0CB4
  
  PIXEL_MAP_I_TO_A_SIZE = 0x0CB5
  
  PIXEL_MAP_R_TO_R_SIZE = 0x0CB6
  
  PIXEL_MAP_G_TO_G_SIZE = 0x0CB7
  
  PIXEL_MAP_B_TO_B_SIZE = 0x0CB8
  
  PIXEL_MAP_A_TO_A_SIZE = 0x0CB9
  
  PIXEL_MAP_S_TO_S = 0x0C71
  
  PIXEL_MAP_I_TO_I = 0x0C70
  
  PIXEL_MAP_I_TO_R = 0x0C72
  
  PIXEL_MAP_I_TO_G = 0x0C73
  
  PIXEL_MAP_I_TO_B = 0x0C74
  
  PIXEL_MAP_I_TO_A = 0x0C75
  
  PIXEL_MAP_R_TO_R = 0x0C76
  
  PIXEL_MAP_G_TO_G = 0x0C77
  
  PIXEL_MAP_B_TO_B = 0x0C78
  
  PIXEL_MAP_A_TO_A = 0x0C79
  
  PACK_ALIGNMENT = 0x0D05
  
  PACK_LSB_FIRST = 0x0D01
  
  PACK_ROW_LENGTH = 0x0D02
  
  PACK_SKIP_PIXELS = 0x0D04
  
  PACK_SKIP_ROWS = 0x0D03
  
  PACK_SWAP_BYTES = 0x0D00
  
  UNPACK_ALIGNMENT = 0x0CF5
  
  UNPACK_LSB_FIRST = 0x0CF1
  
  UNPACK_ROW_LENGTH = 0x0CF2
  
  UNPACK_SKIP_PIXELS = 0x0CF4
  
  UNPACK_SKIP_ROWS = 0x0CF3
  
  UNPACK_SWAP_BYTES = 0x0CF0
  
  ZOOM_X = 0x0D16
  
  ZOOM_Y = 0x0D17
  
  TEXTURE_ENV = 0x2300
  
  TEXTURE_ENV_MODE = 0x2200
  
  TEXTURE_1D = 0x0DE0
  
  TEXTURE_2D = 0x0DE1
  
  TEXTURE_WRAP_S = 0x2802
  
  TEXTURE_WRAP_T = 0x2803
  
  TEXTURE_MAG_FILTER = 0x2800
  
  TEXTURE_MIN_FILTER = 0x2801
  
  TEXTURE_ENV_COLOR = 0x2201
  
  TEXTURE_GEN_S = 0x0C60
  
  TEXTURE_GEN_T = 0x0C61
  
  TEXTURE_GEN_R = 0x0C62
  
  TEXTURE_GEN_Q = 0x0C63
  
  TEXTURE_GEN_MODE = 0x2500
  
  TEXTURE_BORDER_COLOR = 0x1004
  
  TEXTURE_WIDTH = 0x1000
  
  TEXTURE_HEIGHT = 0x1001
  
  TEXTURE_BORDER = 0x1005
  
  TEXTURE_COMPONENTS = 0x1003
  
  TEXTURE_RED_SIZE = 0x805
  
  TEXTURE_GREEN_SIZE = 0x805
  
  TEXTURE_BLUE_SIZE = 0x805
  
  TEXTURE_ALPHA_SIZE = 0x805
  
  TEXTURE_LUMINANCE_SIZE = 0x8060
  
  TEXTURE_INTENSITY_SIZE = 0x8061
  
  NEAREST_MIPMAP_NEAREST = 0x2700
  
  NEAREST_MIPMAP_LINEAR = 0x2702
  
  LINEAR_MIPMAP_NEAREST = 0x2701
  
  LINEAR_MIPMAP_LINEAR = 0x2703
  
  OBJECT_LINEAR = 0x2401
  
  OBJECT_PLANE = 0x2501
  
  EYE_LINEAR = 0x2400
  
  EYE_PLANE = 0x2502
  
  SPHERE_MAP = 0x2402
  
  DECAL = 0x2101
  
  MODULATE = 0x2100
  
  NEAREST = 0x2600
  
  REPEAT = 0x2901
  
  CLAMP = 0x2900
  
  S = 0x2000
  
  T = 0x2001
  
  R = 0x2002
  
  Q = 0x2003
  
  VENDOR = 0x1F00
  
  RENDERER = 0x1F01
  
  VERSION = 0x1F02
  
  EXTENSIONS = 0x1F03
  
  NO_ERROR = 0x0
  
  INVALID_ENUM = 0x0500
  
  INVALID_VALUE = 0x0501
  
  INVALID_OPERATION = 0x0502
  
  STACK_OVERFLOW = 0x0503
  
  STACK_UNDERFLOW = 0x0504
  
  OUT_OF_MEMORY = 0x0505
  
  CURRENT_BIT = 0x00000001
  
  POINT_BIT = 0x00000002
  
  LINE_BIT = 0x00000004
  
  POLYGON_BIT = 0x00000008
  
  POLYGON_STIPPLE_BIT = 0x00000010
  
  PIXEL_MODE_BIT = 0x00000020
  
  LIGHTING_BIT = 0x00000040
  
  FOG_BIT = 0x00000080
  
  DEPTH_BUFFER_BIT = 0x00000100
  
  ACCUM_BUFFER_BIT = 0x00000200
  
  STENCIL_BUFFER_BIT = 0x00000400
  
  VIEWPORT_BIT = 0x00000800
  
  TRANSFORM_BIT = 0x00001000
  
  ENABLE_BIT = 0x00002000
  
  COLOR_BUFFER_BIT = 0x00004000
  
  HINT_BIT = 0x00008000
  
  EVAL_BIT = 0x00010000
  
  LIST_BIT = 0x00020000
  
  TEXTURE_BIT = 0x00040000
  
  SCISSOR_BIT = 0x00080000
  
  ALL_ATTRIB_BITS = 0x000
  
  PROXY_TEXTURE_1D = 0x8063
  
  PROXY_TEXTURE_2D = 0x8064
  
  TEXTURE_PRIORITY = 0x8066
  
  TEXTURE_RESIDENT = 0x8067
  
  TEXTURE_BINDING_1D = 0x8068
  
  TEXTURE_BINDING_2D = 0x8069
  
  TEXTURE_INTERNAL_FORMAT = 0x1003
  
  ALPHA4 = 0x803
  
  ALPHA8 = 0x803
  
  ALPHA12 = 0x803
  
  ALPHA16 = 0x803
  
  LUMINANCE4 = 0x803
  
  LUMINANCE8 = 0x8040
  
  LUMINANCE12 = 0x8041
  
  LUMINANCE16 = 0x8042
  
  LUMINANCE4_ALPHA4 = 0x8043
  
  LUMINANCE6_ALPHA2 = 0x8044
  
  LUMINANCE8_ALPHA8 = 0x8045
  
  LUMINANCE12_ALPHA4 = 0x8046
  
  LUMINANCE12_ALPHA12 = 0x8047
  
  LUMINANCE16_ALPHA16 = 0x8048
  
  INTENSITY = 0x8049
  
  INTENSITY4 = 0x804
  
  INTENSITY8 = 0x804
  
  INTENSITY12 = 0x804
  
  INTENSITY16 = 0x804
  
  R3_G3_B2 = 0x2A10
  
  RGB4 = 0x804
  
  RGB5 = 0x8050
  
  RGB8 = 0x8051
  
  RGB10 = 0x8052
  
  RGB12 = 0x8053
  
  RGB16 = 0x8054
  
  RGBA2 = 0x8055
  
  RGBA4 = 0x8056
  
  RGB5_A1 = 0x8057
  
  RGBA8 = 0x8058
  
  RGB10_A2 = 0x8059
  
  RGBA12 = 0x805
  
  RGBA16 = 0x805
  
  CLIENT_PIXEL_STORE_BIT = 0x00000001
  
  CLIENT_VERTEX_ARRAY_BIT = 0x00000002
  
  ALL_CLIENT_ATTRIB_BITS = 0
  
  CLIENT_ALL_ATTRIB_BITS = 0
  
  RESCALE_NORMAL = 0x803
  
  CLAMP_TO_EDGE = 0x812
  
  MAX_ELEMENTS_VERTICES = 0x80E8
  
  MAX_ELEMENTS_INDICES = 0x80E9
  
  BGR = 0x80E0
  
  BGRA = 0x80E1
  
  UNSIGNED_BYTE_3_3_2 = 0x8032
  
  UNSIGNED_BYTE_2_3_3_REV = 0x8362
  
  UNSIGNED_SHORT_5_6_5 = 0x8363
  
  UNSIGNED_SHORT_5_6_5_REV = 0x8364
  
  UNSIGNED_SHORT_4_4_4_4 = 0x8033
  
  UNSIGNED_SHORT_4_4_4_4_REV = 0x8365
  
  UNSIGNED_SHORT_5_5_5_1 = 0x8034
  
  UNSIGNED_SHORT_1_5_5_5_REV = 0x8366
  
  UNSIGNED_INT_8_8_8_8 = 0x8035
  
  UNSIGNED_INT_8_8_8_8_REV = 0x8367
  
  UNSIGNED_INT_10_10_10_2 = 0x8036
  
  UNSIGNED_INT_2_10_10_10_REV = 0x8368
  
  LIGHT_MODEL_COLOR_CONTROL = 0x81F8
  
  SINGLE_COLOR = 0x81F9
  
  SEPARATE_SPECULAR_COLOR = 0x81
  
  TEXTURE_MIN_LOD = 0x813
  
  TEXTURE_MAX_LOD = 0x813
  
  TEXTURE_BASE_LEVEL = 0x813
  
  TEXTURE_MAX_LEVEL = 0x813
  
  SMOOTH_POINT_SIZE_RANGE = 0x0B12
  
  SMOOTH_POINT_SIZE_GRANULARITY = 0x0B13
  
  SMOOTH_LINE_WIDTH_RANGE = 0x0B22
  
  SMOOTH_LINE_WIDTH_GRANULARITY = 0x0B23
  
  ALIASED_POINT_SIZE_RANGE = 0x846
  
  ALIASED_LINE_WIDTH_RANGE = 0x846
  
  PACK_SKIP_IMAGES = 0x806
  
  PACK_IMAGE_HEIGHT = 0x806
  
  UNPACK_SKIP_IMAGES = 0x806
  
  UNPACK_IMAGE_HEIGHT = 0x806
  
  TEXTURE_3D = 0x806
  
  PROXY_TEXTURE_3D = 0x8070
  
  TEXTURE_DEPTH = 0x8071
  
  TEXTURE_WRAP_R = 0x8072
  
  MAX_3D_TEXTURE_SIZE = 0x8073
  
  TEXTURE_BINDING_3D = 0x806
  
  CONSTANT_COLOR = 0x8001
  
  ONE_MINUS_CONSTANT_COLOR = 0x8002
  
  CONSTANT_ALPHA = 0x8003
  
  ONE_MINUS_CONSTANT_ALPHA = 0x8004
  
  COLOR_TABLE = 0x80D0
  
  POST_CONVOLUTION_COLOR_TABLE = 0x80D1
  
  POST_COLOR_MATRIX_COLOR_TABLE = 0x80D2
  
  PROXY_COLOR_TABLE = 0x80D3
  
  PROXY_POST_CONVOLUTION_COLOR_TABLE = 0x80D4
  
  PROXY_POST_COLOR_MATRIX_COLOR_TABLE = 0x80D5
  
  COLOR_TABLE_SCALE = 0x80D6
  
  COLOR_TABLE_BIAS = 0x80D7
  
  COLOR_TABLE_FORMAT = 0x80D8
  
  COLOR_TABLE_WIDTH = 0x80D9
  
  COLOR_TABLE_RED_SIZE = 0x80
  
  COLOR_TABLE_GREEN_SIZE = 0x80
  
  COLOR_TABLE_BLUE_SIZE = 0x80
  
  COLOR_TABLE_ALPHA_SIZE = 0x80
  
  COLOR_TABLE_LUMINANCE_SIZE = 0x80
  
  COLOR_TABLE_INTENSITY_SIZE = 0x80
  
  CONVOLUTION_1D = 0x8010
  
  CONVOLUTION_2D = 0x8011
  
  SEPARABLE_2D = 0x8012
  
  CONVOLUTION_BORDER_MODE = 0x8013
  
  CONVOLUTION_FILTER_SCALE = 0x8014
  
  CONVOLUTION_FILTER_BIAS = 0x8015
  
  REDUCE = 0x8016
  
  CONVOLUTION_FORMAT = 0x8017
  
  CONVOLUTION_WIDTH = 0x8018
  
  CONVOLUTION_HEIGHT = 0x8019
  
  MAX_CONVOLUTION_WIDTH = 0x801
  
  MAX_CONVOLUTION_HEIGHT = 0x801
  
  POST_CONVOLUTION_RED_SCALE = 0x801
  
  POST_CONVOLUTION_GREEN_SCALE = 0x801
  
  POST_CONVOLUTION_BLUE_SCALE = 0x801
  
  POST_CONVOLUTION_ALPHA_SCALE = 0x801
  
  POST_CONVOLUTION_RED_BIAS = 0x8020
  
  POST_CONVOLUTION_GREEN_BIAS = 0x8021
  
  POST_CONVOLUTION_BLUE_BIAS = 0x8022
  
  POST_CONVOLUTION_ALPHA_BIAS = 0x8023
  
  CONSTANT_BORDER = 0x8151
  
  REPLICATE_BORDER = 0x8153
  
  CONVOLUTION_BORDER_COLOR = 0x8154
  
  COLOR_MATRIX = 0x80B1
  
  COLOR_MATRIX_STACK_DEPTH = 0x80B2
  
  MAX_COLOR_MATRIX_STACK_DEPTH = 0x80B3
  
  POST_COLOR_MATRIX_RED_SCALE = 0x80B4
  
  POST_COLOR_MATRIX_GREEN_SCALE = 0x80B5
  
  POST_COLOR_MATRIX_BLUE_SCALE = 0x80B6
  
  POST_COLOR_MATRIX_ALPHA_SCALE = 0x80B7
  
  POST_COLOR_MATRIX_RED_BIAS = 0x80B8
  
  POST_COLOR_MATRIX_GREEN_BIAS = 0x80B9
  
  POST_COLOR_MATRIX_BLUE_BIAS = 0x80
  
  POST_COLOR_MATRIX_ALPHA_BIAS = 0x80
  
  HISTOGRAM = 0x8024
  
  PROXY_HISTOGRAM = 0x8025
  
  HISTOGRAM_WIDTH = 0x8026
  
  HISTOGRAM_FORMAT = 0x8027
  
  HISTOGRAM_RED_SIZE = 0x8028
  
  HISTOGRAM_GREEN_SIZE = 0x8029
  
  HISTOGRAM_BLUE_SIZE = 0x802
  
  HISTOGRAM_ALPHA_SIZE = 0x802
  
  HISTOGRAM_LUMINANCE_SIZE = 0x802
  
  HISTOGRAM_SINK = 0x802
  
  MINMAX = 0x802
  
  MINMAX_FORMAT = 0x802
  
  MINMAX_SINK = 0x8030
  
  TABLE_TOO_LARGE = 0x8031
  
  BLEND_EQUATION = 0x8009
  
  MIN = 0x8007
  
  MAX = 0x8008
  
  FUNC_ADD = 0x8006
  
  FUNC_SUBTRACT = 0x800
  
  FUNC_REVERSE_SUBTRACT = 0x800
  
  BLEND_COLOR = 0x8005
  
  TEXTURE0 = 0x84C0
  
  TEXTURE1 = 0x84C1
  
  TEXTURE2 = 0x84C2
  
  TEXTURE3 = 0x84C3
  
  TEXTURE4 = 0x84C4
  
  TEXTURE5 = 0x84C5
  
  TEXTURE6 = 0x84C6
  
  TEXTURE7 = 0x84C7
  
  TEXTURE8 = 0x84C8
  
  TEXTURE9 = 0x84C9
  
  TEXTURE10 = 0x84
  
  TEXTURE11 = 0x84
  
  TEXTURE12 = 0x84
  
  TEXTURE13 = 0x84
  
  TEXTURE14 = 0x84
  
  TEXTURE15 = 0x84
  
  TEXTURE16 = 0x84D0
  
  TEXTURE17 = 0x84D1
  
  TEXTURE18 = 0x84D2
  
  TEXTURE19 = 0x84D3
  
  TEXTURE20 = 0x84D4
  
  TEXTURE21 = 0x84D5
  
  TEXTURE22 = 0x84D6
  
  TEXTURE23 = 0x84D7
  
  TEXTURE24 = 0x84D8
  
  TEXTURE25 = 0x84D9
  
  TEXTURE26 = 0x84
  
  TEXTURE27 = 0x84
  
  TEXTURE28 = 0x84
  
  TEXTURE29 = 0x84
  
  TEXTURE30 = 0x84
  
  TEXTURE31 = 0x84
  
  ACTIVE_TEXTURE = 0x84E0
  
  CLIENT_ACTIVE_TEXTURE = 0x84E1
  
  MAX_TEXTURE_UNITS = 0x84E2
  
  NORMAL_MAP = 0x8511
  
  REFLECTION_MAP = 0x8512
  
  TEXTURE_CUBE_MAP = 0x8513
  
  TEXTURE_BINDING_CUBE_MAP = 0x8514
  
  TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515
  
  TEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516
  
  TEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517
  
  TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518
  
  TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519
  
  TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851
  
  PROXY_TEXTURE_CUBE_MAP = 0x851
  
  MAX_CUBE_MAP_TEXTURE_SIZE = 0x851
  
  COMPRESSED_ALPHA = 0x84E9
  
  COMPRESSED_LUMINANCE = 0x84
  
  COMPRESSED_LUMINANCE_ALPHA = 0x84
  
  COMPRESSED_INTENSITY = 0x84
  
  COMPRESSED_RGB = 0x84
  
  COMPRESSED_RGBA = 0x84
  
  TEXTURE_COMPRESSION_HINT = 0x84
  
  TEXTURE_COMPRESSED_IMAGE_SIZE = 0x86A0
  
  TEXTURE_COMPRESSED = 0x86A1
  
  NUM_COMPRESSED_TEXTURE_FORMATS = 0x86A2
  
  COMPRESSED_TEXTURE_FORMATS = 0x86A3
  
  MULTISAMPLE = 0x809
  
  SAMPLE_ALPHA_TO_COVERAGE = 0x809
  
  SAMPLE_ALPHA_TO_ONE = 0x809
  
  SAMPLE_COVERAGE = 0x80A0
  
  SAMPLE_BUFFERS = 0x80A8
  
  SAMPLES = 0x80A9
  
  SAMPLE_COVERAGE_VALUE = 0x80
  
  SAMPLE_COVERAGE_INVERT = 0x80
  
  MULTISAMPLE_BIT = 0x20000000
  
  TRANSPOSE_MODELVIEW_MATRIX = 0x84E3
  
  TRANSPOSE_PROJECTION_MATRIX = 0x84E4
  
  TRANSPOSE_TEXTURE_MATRIX = 0x84E5
  
  TRANSPOSE_COLOR_MATRIX = 0x84E6
  
  COMBINE = 0x8570
  
  COMBINE_RGB = 0x8571
  
  COMBINE_ALPHA = 0x8572
  
  SOURCE0_RGB = 0x8580
  
  SOURCE1_RGB = 0x8581
  
  SOURCE2_RGB = 0x8582
  
  SOURCE0_ALPHA = 0x8588
  
  SOURCE1_ALPHA = 0x8589
  
  SOURCE2_ALPHA = 0x858
  
  OPERAND0_RGB = 0x8590
  
  OPERAND1_RGB = 0x8591
  
  OPERAND2_RGB = 0x8592
  
  OPERAND0_ALPHA = 0x8598
  
  OPERAND1_ALPHA = 0x8599
  
  OPERAND2_ALPHA = 0x859
  
  RGB_SCALE = 0x8573
  
  ADD_SIGNED = 0x8574
  
  INTERPOLATE = 0x8575
  
  SUBTRACT = 0x84E7
  
  CONSTANT = 0x8576
  
  PRIMARY_COLOR = 0x8577
  
  PREVIOUS = 0x8578
  
  DOT3_RGB = 0x86
  
  DOT3_RGBA = 0x86
  
  CLAMP_TO_BORDER = 0x812
  
  ARB_MULTITEXTURE = 1
  
  TEXTURE0_ARB = 0x84C0
  
  TEXTURE1_ARB = 0x84C1
  
  TEXTURE2_ARB = 0x84C2
  
  TEXTURE3_ARB = 0x84C3
  
  TEXTURE4_ARB = 0x84C4
  
  TEXTURE5_ARB = 0x84C5
  
  TEXTURE6_ARB = 0x84C6
  
  TEXTURE7_ARB = 0x84C7
  
  TEXTURE8_ARB = 0x84C8
  
  TEXTURE9_ARB = 0x84C9
  
  TEXTURE10_ARB = 0x84
  
  TEXTURE11_ARB = 0x84
  
  TEXTURE12_ARB = 0x84
  
  TEXTURE13_ARB = 0x84
  
  TEXTURE14_ARB = 0x84
  
  TEXTURE15_ARB = 0x84
  
  TEXTURE16_ARB = 0x84D0
  
  TEXTURE17_ARB = 0x84D1
  
  TEXTURE18_ARB = 0x84D2
  
  TEXTURE19_ARB = 0x84D3
  
  TEXTURE20_ARB = 0x84D4
  
  TEXTURE21_ARB = 0x84D5
  
  TEXTURE22_ARB = 0x84D6
  
  TEXTURE23_ARB = 0x84D7
  
  TEXTURE24_ARB = 0x84D8
  
  TEXTURE25_ARB = 0x84D9
  
  TEXTURE26_ARB = 0x84
  
  TEXTURE27_ARB = 0x84
  
  TEXTURE28_ARB = 0x84
  
  TEXTURE29_ARB = 0x84
  
  TEXTURE30_ARB = 0x84
  
  TEXTURE31_ARB = 0x84
  
  ACTIVE_TEXTURE_ARB = 0x84E0
  
  CLIENT_ACTIVE_TEXTURE_ARB = 0x84E1
  
  MAX_TEXTURE_UNITS_ARB = 0x84E2
  
  MESA_SHADER_DEBUG = 1
  
  MESA_PACKED_DEPTH_STENCIL = 1
  
  MESA_PROGRAM_DEBUG = 1
  
  MESA_TEXTURE_ARRAY = 1
  
  ATI_BLEND_EQUATION_SEPARATE = 1
  
  OES_EGL_IMAGE = 1
  
  # (Not documented)
  # 
  # @method clear_index(c)
  # @param [Float] c 
  # @return [nil] 
  # @scope class
  attach_function :clear_index, :glClearIndex, [:float], :void
  
  # (Not documented)
  # 
  # @method clear_color(red, green, blue, alpha)
  # @param [Float] red 
  # @param [Float] green 
  # @param [Float] blue 
  # @param [Float] alpha 
  # @return [nil] 
  # @scope class
  attach_function :clear_color, :glClearColor, [:float, :float, :float, :float], :void
  
  # (Not documented)
  # 
  # @method clear(mask)
  # @param [Integer] mask 
  # @return [nil] 
  # @scope class
  attach_function :clear, :glClear, [:uint], :void
  
  # (Not documented)
  # 
  # @method index_mask(mask)
  # @param [Integer] mask 
  # @return [nil] 
  # @scope class
  attach_function :index_mask, :glIndexMask, [:uint], :void
  
  # (Not documented)
  # 
  # @method color_mask(red, green, blue, alpha)
  # @param [Integer] red 
  # @param [Integer] green 
  # @param [Integer] blue 
  # @param [Integer] alpha 
  # @return [nil] 
  # @scope class
  attach_function :color_mask, :glColorMask, [:uchar, :uchar, :uchar, :uchar], :void
  
  # (Not documented)
  # 
  # @method alpha_func(func, ref)
  # @param [Integer] func 
  # @param [Float] ref 
  # @return [nil] 
  # @scope class
  attach_function :alpha_func, :glAlphaFunc, [:uint, :float], :void
  
  # (Not documented)
  # 
  # @method blend_func(sfactor, dfactor)
  # @param [Integer] sfactor 
  # @param [Integer] dfactor 
  # @return [nil] 
  # @scope class
  attach_function :blend_func, :glBlendFunc, [:uint, :uint], :void
  
  # (Not documented)
  # 
  # @method logic_op(opcode)
  # @param [Integer] opcode 
  # @return [nil] 
  # @scope class
  attach_function :logic_op, :glLogicOp, [:uint], :void
  
  # (Not documented)
  # 
  # @method cull_face(mode)
  # @param [Integer] mode 
  # @return [nil] 
  # @scope class
  attach_function :cull_face, :glCullFace, [:uint], :void
  
  # (Not documented)
  # 
  # @method front_face(mode)
  # @param [Integer] mode 
  # @return [nil] 
  # @scope class
  attach_function :front_face, :glFrontFace, [:uint], :void
  
  # (Not documented)
  # 
  # @method point_size(size)
  # @param [Float] size 
  # @return [nil] 
  # @scope class
  attach_function :point_size, :glPointSize, [:float], :void
  
  # (Not documented)
  # 
  # @method line_width(width)
  # @param [Float] width 
  # @return [nil] 
  # @scope class
  attach_function :line_width, :glLineWidth, [:float], :void
  
  # (Not documented)
  # 
  # @method line_stipple(factor, pattern)
  # @param [Integer] factor 
  # @param [Integer] pattern 
  # @return [nil] 
  # @scope class
  attach_function :line_stipple, :glLineStipple, [:int, :ushort], :void
  
  # (Not documented)
  # 
  # @method polygon_mode(face, mode)
  # @param [Integer] face 
  # @param [Integer] mode 
  # @return [nil] 
  # @scope class
  attach_function :polygon_mode, :glPolygonMode, [:uint, :uint], :void
  
  # (Not documented)
  # 
  # @method polygon_offset(factor, units)
  # @param [Float] factor 
  # @param [Float] units 
  # @return [nil] 
  # @scope class
  attach_function :polygon_offset, :glPolygonOffset, [:float, :float], :void
  
  # (Not documented)
  # 
  # @method polygon_stipple(mask)
  # @param [FFI::Pointer(*GLubyte)] mask 
  # @return [nil] 
  # @scope class
  attach_function :polygon_stipple, :glPolygonStipple, [:pointer], :void
  
  # (Not documented)
  # 
  # @method get_polygon_stipple(mask)
  # @param [FFI::Pointer(*GLubyte)] mask 
  # @return [nil] 
  # @scope class
  attach_function :get_polygon_stipple, :glGetPolygonStipple, [:pointer], :void
  
  # (Not documented)
  # 
  # @method edge_flag(flag)
  # @param [Integer] flag 
  # @return [nil] 
  # @scope class
  attach_function :edge_flag, :glEdgeFlag, [:uchar], :void
  
  # (Not documented)
  # 
  # @method edge_flagv(flag)
  # @param [FFI::Pointer(*GLboolean)] flag 
  # @return [nil] 
  # @scope class
  attach_function :edge_flagv, :glEdgeFlagv, [:pointer], :void
  
  # (Not documented)
  # 
  # @method scissor(x, y, width, height)
  # @param [Integer] x 
  # @param [Integer] y 
  # @param [Integer] width 
  # @param [Integer] height 
  # @return [nil] 
  # @scope class
  attach_function :scissor, :glScissor, [:int, :int, :int, :int], :void
  
  # (Not documented)
  # 
  # @method clip_plane(plane, equation)
  # @param [Integer] plane 
  # @param [FFI::Pointer(*GLdouble)] equation 
  # @return [nil] 
  # @scope class
  attach_function :clip_plane, :glClipPlane, [:uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method get_clip_plane(plane, equation)
  # @param [Integer] plane 
  # @param [FFI::Pointer(*GLdouble)] equation 
  # @return [nil] 
  # @scope class
  attach_function :get_clip_plane, :glGetClipPlane, [:uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method draw_buffer(mode)
  # @param [Integer] mode 
  # @return [nil] 
  # @scope class
  attach_function :draw_buffer, :glDrawBuffer, [:uint], :void
  
  # (Not documented)
  # 
  # @method read_buffer(mode)
  # @param [Integer] mode 
  # @return [nil] 
  # @scope class
  attach_function :read_buffer, :glReadBuffer, [:uint], :void
  
  # (Not documented)
  # 
  # @method enable(cap)
  # @param [Integer] cap 
  # @return [nil] 
  # @scope class
  attach_function :enable, :glEnable, [:uint], :void
  
  # (Not documented)
  # 
  # @method disable(cap)
  # @param [Integer] cap 
  # @return [nil] 
  # @scope class
  attach_function :disable, :glDisable, [:uint], :void
  
  # (Not documented)
  # 
  # @method is_enabled(cap)
  # @param [Integer] cap 
  # @return [Integer] 
  # @scope class
  attach_function :is_enabled, :glIsEnabled, [:uint], :uchar
  
  # (Not documented)
  # 
  # @method enable_client_state(cap)
  # @param [Integer] cap 
  # @return [nil] 
  # @scope class
  attach_function :enable_client_state, :glEnableClientState, [:uint], :void
  
  # (Not documented)
  # 
  # @method disable_client_state(cap)
  # @param [Integer] cap 
  # @return [nil] 
  # @scope class
  attach_function :disable_client_state, :glDisableClientState, [:uint], :void
  
  # (Not documented)
  # 
  # @method get_booleanv(pname, params)
  # @param [Integer] pname 
  # @param [FFI::Pointer(*GLboolean)] params 
  # @return [nil] 
  # @scope class
  attach_function :get_booleanv, :glGetBooleanv, [:uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method get_doublev(pname, params)
  # @param [Integer] pname 
  # @param [FFI::Pointer(*GLdouble)] params 
  # @return [nil] 
  # @scope class
  attach_function :get_doublev, :glGetDoublev, [:uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method get_floatv(pname, params)
  # @param [Integer] pname 
  # @param [FFI::Pointer(*GLfloat)] params 
  # @return [nil] 
  # @scope class
  attach_function :get_floatv, :glGetFloatv, [:uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method get_integerv(pname, params)
  # @param [Integer] pname 
  # @param [FFI::Pointer(*GLint)] params 
  # @return [nil] 
  # @scope class
  attach_function :get_integerv, :glGetIntegerv, [:uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method push_attrib(mask)
  # @param [Integer] mask 
  # @return [nil] 
  # @scope class
  attach_function :push_attrib, :glPushAttrib, [:uint], :void
  
  # (Not documented)
  # 
  # @method pop_attrib()
  # @return [nil] 
  # @scope class
  attach_function :pop_attrib, :glPopAttrib, [], :void
  
  # (Not documented)
  # 
  # @method push_client_attrib(mask)
  # @param [Integer] mask 
  # @return [nil] 
  # @scope class
  attach_function :push_client_attrib, :glPushClientAttrib, [:uint], :void
  
  # (Not documented)
  # 
  # @method pop_client_attrib()
  # @return [nil] 
  # @scope class
  attach_function :pop_client_attrib, :glPopClientAttrib, [], :void
  
  # (Not documented)
  # 
  # @method render_mode(mode)
  # @param [Integer] mode 
  # @return [Integer] 
  # @scope class
  attach_function :render_mode, :glRenderMode, [:uint], :int
  
  # (Not documented)
  # 
  # @method get_error()
  # @return [Integer] 
  # @scope class
  attach_function :get_error, :glGetError, [], :uint
  
  # (Not documented)
  # 
  # @method get_string(name)
  # @param [Integer] name 
  # @return [FFI::Pointer(*GLubyte)] 
  # @scope class
  attach_function :get_string, :glGetString, [:uint], :pointer
  
  # (Not documented)
  # 
  # @method finish()
  # @return [nil] 
  # @scope class
  attach_function :finish, :glFinish, [], :void
  
  # (Not documented)
  # 
  # @method flush()
  # @return [nil] 
  # @scope class
  attach_function :flush, :glFlush, [], :void
  
  # (Not documented)
  # 
  # @method hint(target, mode)
  # @param [Integer] target 
  # @param [Integer] mode 
  # @return [nil] 
  # @scope class
  attach_function :hint, :glHint, [:uint, :uint], :void
  
  # (Not documented)
  # 
  # @method clear_depth(depth)
  # @param [Float] depth 
  # @return [nil] 
  # @scope class
  attach_function :clear_depth, :glClearDepth, [:double], :void
  
  # (Not documented)
  # 
  # @method depth_func(func)
  # @param [Integer] func 
  # @return [nil] 
  # @scope class
  attach_function :depth_func, :glDepthFunc, [:uint], :void
  
  # (Not documented)
  # 
  # @method depth_mask(flag)
  # @param [Integer] flag 
  # @return [nil] 
  # @scope class
  attach_function :depth_mask, :glDepthMask, [:uchar], :void
  
  # (Not documented)
  # 
  # @method depth_range(near_val, far_val)
  # @param [Float] near_val 
  # @param [Float] far_val 
  # @return [nil] 
  # @scope class
  attach_function :depth_range, :glDepthRange, [:double, :double], :void
  
  # (Not documented)
  # 
  # @method clear_accum(red, green, blue, alpha)
  # @param [Float] red 
  # @param [Float] green 
  # @param [Float] blue 
  # @param [Float] alpha 
  # @return [nil] 
  # @scope class
  attach_function :clear_accum, :glClearAccum, [:float, :float, :float, :float], :void
  
  # (Not documented)
  # 
  # @method accum(op, value)
  # @param [Integer] op 
  # @param [Float] value 
  # @return [nil] 
  # @scope class
  attach_function :accum, :glAccum, [:uint, :float], :void
  
  # (Not documented)
  # 
  # @method matrix_mode(mode)
  # @param [Integer] mode 
  # @return [nil] 
  # @scope class
  attach_function :matrix_mode, :glMatrixMode, [:uint], :void
  
  # (Not documented)
  # 
  # @method ortho(left, right, bottom, top, near_val, far_val)
  # @param [Float] left 
  # @param [Float] right 
  # @param [Float] bottom 
  # @param [Float] top 
  # @param [Float] near_val 
  # @param [Float] far_val 
  # @return [nil] 
  # @scope class
  attach_function :ortho, :glOrtho, [:double, :double, :double, :double, :double, :double], :void
  
  # (Not documented)
  # 
  # @method frustum(left, right, bottom, top, near_val, far_val)
  # @param [Float] left 
  # @param [Float] right 
  # @param [Float] bottom 
  # @param [Float] top 
  # @param [Float] near_val 
  # @param [Float] far_val 
  # @return [nil] 
  # @scope class
  attach_function :frustum, :glFrustum, [:double, :double, :double, :double, :double, :double], :void
  
  # (Not documented)
  # 
  # @method viewport(x, y, width, height)
  # @param [Integer] x 
  # @param [Integer] y 
  # @param [Integer] width 
  # @param [Integer] height 
  # @return [nil] 
  # @scope class
  attach_function :viewport, :glViewport, [:int, :int, :int, :int], :void
  
  # (Not documented)
  # 
  # @method push_matrix()
  # @return [nil] 
  # @scope class
  attach_function :push_matrix, :glPushMatrix, [], :void
  
  # (Not documented)
  # 
  # @method pop_matrix()
  # @return [nil] 
  # @scope class
  attach_function :pop_matrix, :glPopMatrix, [], :void
  
  # (Not documented)
  # 
  # @method load_identity()
  # @return [nil] 
  # @scope class
  attach_function :load_identity, :glLoadIdentity, [], :void
  
  # (Not documented)
  # 
  # @method load_matrixd(m)
  # @param [FFI::Pointer(*GLdouble)] m 
  # @return [nil] 
  # @scope class
  attach_function :load_matrixd, :glLoadMatrixd, [:pointer], :void
  
  # (Not documented)
  # 
  # @method load_matrixf(m)
  # @param [FFI::Pointer(*GLfloat)] m 
  # @return [nil] 
  # @scope class
  attach_function :load_matrixf, :glLoadMatrixf, [:pointer], :void
  
  # (Not documented)
  # 
  # @method mult_matrixd(m)
  # @param [FFI::Pointer(*GLdouble)] m 
  # @return [nil] 
  # @scope class
  attach_function :mult_matrixd, :glMultMatrixd, [:pointer], :void
  
  # (Not documented)
  # 
  # @method mult_matrixf(m)
  # @param [FFI::Pointer(*GLfloat)] m 
  # @return [nil] 
  # @scope class
  attach_function :mult_matrixf, :glMultMatrixf, [:pointer], :void
  
  # (Not documented)
  # 
  # @method rotated(angle, x, y, z)
  # @param [Float] angle 
  # @param [Float] x 
  # @param [Float] y 
  # @param [Float] z 
  # @return [nil] 
  # @scope class
  attach_function :rotated, :glRotated, [:double, :double, :double, :double], :void
  
  # (Not documented)
  # 
  # @method rotatef(angle, x, y, z)
  # @param [Float] angle 
  # @param [Float] x 
  # @param [Float] y 
  # @param [Float] z 
  # @return [nil] 
  # @scope class
  attach_function :rotatef, :glRotatef, [:float, :float, :float, :float], :void
  
  # (Not documented)
  # 
  # @method scaled(x, y, z)
  # @param [Float] x 
  # @param [Float] y 
  # @param [Float] z 
  # @return [nil] 
  # @scope class
  attach_function :scaled, :glScaled, [:double, :double, :double], :void
  
  # (Not documented)
  # 
  # @method scalef(x, y, z)
  # @param [Float] x 
  # @param [Float] y 
  # @param [Float] z 
  # @return [nil] 
  # @scope class
  attach_function :scalef, :glScalef, [:float, :float, :float], :void
  
  # (Not documented)
  # 
  # @method translated(x, y, z)
  # @param [Float] x 
  # @param [Float] y 
  # @param [Float] z 
  # @return [nil] 
  # @scope class
  attach_function :translated, :glTranslated, [:double, :double, :double], :void
  
  # (Not documented)
  # 
  # @method translatef(x, y, z)
  # @param [Float] x 
  # @param [Float] y 
  # @param [Float] z 
  # @return [nil] 
  # @scope class
  attach_function :translatef, :glTranslatef, [:float, :float, :float], :void
  
  # (Not documented)
  # 
  # @method is_list(list)
  # @param [Integer] list 
  # @return [Integer] 
  # @scope class
  attach_function :is_list, :glIsList, [:uint], :uchar
  
  # (Not documented)
  # 
  # @method delete_lists(list, range)
  # @param [Integer] list 
  # @param [Integer] range 
  # @return [nil] 
  # @scope class
  attach_function :delete_lists, :glDeleteLists, [:uint, :int], :void
  
  # (Not documented)
  # 
  # @method gen_lists(range)
  # @param [Integer] range 
  # @return [Integer] 
  # @scope class
  attach_function :gen_lists, :glGenLists, [:int], :uint
  
  # (Not documented)
  # 
  # @method new_list(list, mode)
  # @param [Integer] list 
  # @param [Integer] mode 
  # @return [nil] 
  # @scope class
  attach_function :new_list, :glNewList, [:uint, :uint], :void
  
  # (Not documented)
  # 
  # @method end_list()
  # @return [nil] 
  # @scope class
  attach_function :end_list, :glEndList, [], :void
  
  # (Not documented)
  # 
  # @method call_list(list)
  # @param [Integer] list 
  # @return [nil] 
  # @scope class
  attach_function :call_list, :glCallList, [:uint], :void
  
  # (Not documented)
  # 
  # @method call_lists(n, type, lists)
  # @param [Integer] n 
  # @param [Integer] type 
  # @param [FFI::Pointer(*GLvoid)] lists 
  # @return [nil] 
  # @scope class
  attach_function :call_lists, :glCallLists, [:int, :uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method list_base(base)
  # @param [Integer] base 
  # @return [nil] 
  # @scope class
  attach_function :list_base, :glListBase, [:uint], :void
  
  # (Not documented)
  # 
  # @method _begin(mode)
  # @param [Integer] mode 
  # @return [nil] 
  # @scope class
  attach_function :_begin, :glBegin, [:uint], :void
  
  # (Not documented)
  # 
  # @method _end()
  # @return [nil] 
  # @scope class
  attach_function :_end, :glEnd, [], :void
  
  # (Not documented)
  # 
  # @method vertex2d(x, y)
  # @param [Float] x 
  # @param [Float] y 
  # @return [nil] 
  # @scope class
  attach_function :vertex2d, :glVertex2d, [:double, :double], :void
  
  # (Not documented)
  # 
  # @method vertex2f(x, y)
  # @param [Float] x 
  # @param [Float] y 
  # @return [nil] 
  # @scope class
  attach_function :vertex2f, :glVertex2f, [:float, :float], :void
  
  # (Not documented)
  # 
  # @method vertex2i(x, y)
  # @param [Integer] x 
  # @param [Integer] y 
  # @return [nil] 
  # @scope class
  attach_function :vertex2i, :glVertex2i, [:int, :int], :void
  
  # (Not documented)
  # 
  # @method vertex2s(x, y)
  # @param [Integer] x 
  # @param [Integer] y 
  # @return [nil] 
  # @scope class
  attach_function :vertex2s, :glVertex2s, [:short, :short], :void
  
  # (Not documented)
  # 
  # @method vertex3d(x, y, z)
  # @param [Float] x 
  # @param [Float] y 
  # @param [Float] z 
  # @return [nil] 
  # @scope class
  attach_function :vertex3d, :glVertex3d, [:double, :double, :double], :void
  
  # (Not documented)
  # 
  # @method vertex3f(x, y, z)
  # @param [Float] x 
  # @param [Float] y 
  # @param [Float] z 
  # @return [nil] 
  # @scope class
  attach_function :vertex3f, :glVertex3f, [:float, :float, :float], :void
  
  # (Not documented)
  # 
  # @method vertex3i(x, y, z)
  # @param [Integer] x 
  # @param [Integer] y 
  # @param [Integer] z 
  # @return [nil] 
  # @scope class
  attach_function :vertex3i, :glVertex3i, [:int, :int, :int], :void
  
  # (Not documented)
  # 
  # @method vertex3s(x, y, z)
  # @param [Integer] x 
  # @param [Integer] y 
  # @param [Integer] z 
  # @return [nil] 
  # @scope class
  attach_function :vertex3s, :glVertex3s, [:short, :short, :short], :void
  
  # (Not documented)
  # 
  # @method vertex4d(x, y, z, w)
  # @param [Float] x 
  # @param [Float] y 
  # @param [Float] z 
  # @param [Float] w 
  # @return [nil] 
  # @scope class
  attach_function :vertex4d, :glVertex4d, [:double, :double, :double, :double], :void
  
  # (Not documented)
  # 
  # @method vertex4f(x, y, z, w)
  # @param [Float] x 
  # @param [Float] y 
  # @param [Float] z 
  # @param [Float] w 
  # @return [nil] 
  # @scope class
  attach_function :vertex4f, :glVertex4f, [:float, :float, :float, :float], :void
  
  # (Not documented)
  # 
  # @method vertex4i(x, y, z, w)
  # @param [Integer] x 
  # @param [Integer] y 
  # @param [Integer] z 
  # @param [Integer] w 
  # @return [nil] 
  # @scope class
  attach_function :vertex4i, :glVertex4i, [:int, :int, :int, :int], :void
  
  # (Not documented)
  # 
  # @method vertex4s(x, y, z, w)
  # @param [Integer] x 
  # @param [Integer] y 
  # @param [Integer] z 
  # @param [Integer] w 
  # @return [nil] 
  # @scope class
  attach_function :vertex4s, :glVertex4s, [:short, :short, :short, :short], :void
  
  # (Not documented)
  # 
  # @method vertex2dv(v)
  # @param [FFI::Pointer(*GLdouble)] v 
  # @return [nil] 
  # @scope class
  attach_function :vertex2dv, :glVertex2dv, [:pointer], :void
  
  # (Not documented)
  # 
  # @method vertex2fv(v)
  # @param [FFI::Pointer(*GLfloat)] v 
  # @return [nil] 
  # @scope class
  attach_function :vertex2fv, :glVertex2fv, [:pointer], :void
  
  # (Not documented)
  # 
  # @method vertex2iv(v)
  # @param [FFI::Pointer(*GLint)] v 
  # @return [nil] 
  # @scope class
  attach_function :vertex2iv, :glVertex2iv, [:pointer], :void
  
  # (Not documented)
  # 
  # @method vertex2sv(v)
  # @param [FFI::Pointer(*GLshort)] v 
  # @return [nil] 
  # @scope class
  attach_function :vertex2sv, :glVertex2sv, [:pointer], :void
  
  # (Not documented)
  # 
  # @method vertex3dv(v)
  # @param [FFI::Pointer(*GLdouble)] v 
  # @return [nil] 
  # @scope class
  attach_function :vertex3dv, :glVertex3dv, [:pointer], :void
  
  # (Not documented)
  # 
  # @method vertex3fv(v)
  # @param [FFI::Pointer(*GLfloat)] v 
  # @return [nil] 
  # @scope class
  attach_function :vertex3fv, :glVertex3fv, [:pointer], :void
  
  # (Not documented)
  # 
  # @method vertex3iv(v)
  # @param [FFI::Pointer(*GLint)] v 
  # @return [nil] 
  # @scope class
  attach_function :vertex3iv, :glVertex3iv, [:pointer], :void
  
  # (Not documented)
  # 
  # @method vertex3sv(v)
  # @param [FFI::Pointer(*GLshort)] v 
  # @return [nil] 
  # @scope class
  attach_function :vertex3sv, :glVertex3sv, [:pointer], :void
  
  # (Not documented)
  # 
  # @method vertex4dv(v)
  # @param [FFI::Pointer(*GLdouble)] v 
  # @return [nil] 
  # @scope class
  attach_function :vertex4dv, :glVertex4dv, [:pointer], :void
  
  # (Not documented)
  # 
  # @method vertex4fv(v)
  # @param [FFI::Pointer(*GLfloat)] v 
  # @return [nil] 
  # @scope class
  attach_function :vertex4fv, :glVertex4fv, [:pointer], :void
  
  # (Not documented)
  # 
  # @method vertex4iv(v)
  # @param [FFI::Pointer(*GLint)] v 
  # @return [nil] 
  # @scope class
  attach_function :vertex4iv, :glVertex4iv, [:pointer], :void
  
  # (Not documented)
  # 
  # @method vertex4sv(v)
  # @param [FFI::Pointer(*GLshort)] v 
  # @return [nil] 
  # @scope class
  attach_function :vertex4sv, :glVertex4sv, [:pointer], :void
  
  # (Not documented)
  # 
  # @method normal3b(nx, ny, nz)
  # @param [Integer] nx 
  # @param [Integer] ny 
  # @param [Integer] nz 
  # @return [nil] 
  # @scope class
  attach_function :normal3b, :glNormal3b, [:char, :char, :char], :void
  
  # (Not documented)
  # 
  # @method normal3d(nx, ny, nz)
  # @param [Float] nx 
  # @param [Float] ny 
  # @param [Float] nz 
  # @return [nil] 
  # @scope class
  attach_function :normal3d, :glNormal3d, [:double, :double, :double], :void
  
  # (Not documented)
  # 
  # @method normal3f(nx, ny, nz)
  # @param [Float] nx 
  # @param [Float] ny 
  # @param [Float] nz 
  # @return [nil] 
  # @scope class
  attach_function :normal3f, :glNormal3f, [:float, :float, :float], :void
  
  # (Not documented)
  # 
  # @method normal3i(nx, ny, nz)
  # @param [Integer] nx 
  # @param [Integer] ny 
  # @param [Integer] nz 
  # @return [nil] 
  # @scope class
  attach_function :normal3i, :glNormal3i, [:int, :int, :int], :void
  
  # (Not documented)
  # 
  # @method normal3s(nx, ny, nz)
  # @param [Integer] nx 
  # @param [Integer] ny 
  # @param [Integer] nz 
  # @return [nil] 
  # @scope class
  attach_function :normal3s, :glNormal3s, [:short, :short, :short], :void
  
  # (Not documented)
  # 
  # @method normal3bv(v)
  # @param [FFI::Pointer(*GLbyte)] v 
  # @return [nil] 
  # @scope class
  attach_function :normal3bv, :glNormal3bv, [:pointer], :void
  
  # (Not documented)
  # 
  # @method normal3dv(v)
  # @param [FFI::Pointer(*GLdouble)] v 
  # @return [nil] 
  # @scope class
  attach_function :normal3dv, :glNormal3dv, [:pointer], :void
  
  # (Not documented)
  # 
  # @method normal3fv(v)
  # @param [FFI::Pointer(*GLfloat)] v 
  # @return [nil] 
  # @scope class
  attach_function :normal3fv, :glNormal3fv, [:pointer], :void
  
  # (Not documented)
  # 
  # @method normal3iv(v)
  # @param [FFI::Pointer(*GLint)] v 
  # @return [nil] 
  # @scope class
  attach_function :normal3iv, :glNormal3iv, [:pointer], :void
  
  # (Not documented)
  # 
  # @method normal3sv(v)
  # @param [FFI::Pointer(*GLshort)] v 
  # @return [nil] 
  # @scope class
  attach_function :normal3sv, :glNormal3sv, [:pointer], :void
  
  # (Not documented)
  # 
  # @method indexd(c)
  # @param [Float] c 
  # @return [nil] 
  # @scope class
  attach_function :indexd, :glIndexd, [:double], :void
  
  # (Not documented)
  # 
  # @method indexf(c)
  # @param [Float] c 
  # @return [nil] 
  # @scope class
  attach_function :indexf, :glIndexf, [:float], :void
  
  # (Not documented)
  # 
  # @method indexi(c)
  # @param [Integer] c 
  # @return [nil] 
  # @scope class
  attach_function :indexi, :glIndexi, [:int], :void
  
  # (Not documented)
  # 
  # @method indexs(c)
  # @param [Integer] c 
  # @return [nil] 
  # @scope class
  attach_function :indexs, :glIndexs, [:short], :void
  
  # (Not documented)
  # 
  # @method indexub(c)
  # @param [Integer] c 
  # @return [nil] 
  # @scope class
  attach_function :indexub, :glIndexub, [:uchar], :void
  
  # (Not documented)
  # 
  # @method indexdv(c)
  # @param [FFI::Pointer(*GLdouble)] c 
  # @return [nil] 
  # @scope class
  attach_function :indexdv, :glIndexdv, [:pointer], :void
  
  # (Not documented)
  # 
  # @method indexfv(c)
  # @param [FFI::Pointer(*GLfloat)] c 
  # @return [nil] 
  # @scope class
  attach_function :indexfv, :glIndexfv, [:pointer], :void
  
  # (Not documented)
  # 
  # @method indexiv(c)
  # @param [FFI::Pointer(*GLint)] c 
  # @return [nil] 
  # @scope class
  attach_function :indexiv, :glIndexiv, [:pointer], :void
  
  # (Not documented)
  # 
  # @method indexsv(c)
  # @param [FFI::Pointer(*GLshort)] c 
  # @return [nil] 
  # @scope class
  attach_function :indexsv, :glIndexsv, [:pointer], :void
  
  # (Not documented)
  # 
  # @method indexubv(c)
  # @param [FFI::Pointer(*GLubyte)] c 
  # @return [nil] 
  # @scope class
  attach_function :indexubv, :glIndexubv, [:pointer], :void
  
  # (Not documented)
  # 
  # @method color3b(red, green, blue)
  # @param [Integer] red 
  # @param [Integer] green 
  # @param [Integer] blue 
  # @return [nil] 
  # @scope class
  attach_function :color3b, :glColor3b, [:char, :char, :char], :void
  
  # (Not documented)
  # 
  # @method color3d(red, green, blue)
  # @param [Float] red 
  # @param [Float] green 
  # @param [Float] blue 
  # @return [nil] 
  # @scope class
  attach_function :color3d, :glColor3d, [:double, :double, :double], :void
  
  # (Not documented)
  # 
  # @method color3f(red, green, blue)
  # @param [Float] red 
  # @param [Float] green 
  # @param [Float] blue 
  # @return [nil] 
  # @scope class
  attach_function :color3f, :glColor3f, [:float, :float, :float], :void
  
  # (Not documented)
  # 
  # @method color3i(red, green, blue)
  # @param [Integer] red 
  # @param [Integer] green 
  # @param [Integer] blue 
  # @return [nil] 
  # @scope class
  attach_function :color3i, :glColor3i, [:int, :int, :int], :void
  
  # (Not documented)
  # 
  # @method color3s(red, green, blue)
  # @param [Integer] red 
  # @param [Integer] green 
  # @param [Integer] blue 
  # @return [nil] 
  # @scope class
  attach_function :color3s, :glColor3s, [:short, :short, :short], :void
  
  # (Not documented)
  # 
  # @method color3ub(red, green, blue)
  # @param [Integer] red 
  # @param [Integer] green 
  # @param [Integer] blue 
  # @return [nil] 
  # @scope class
  attach_function :color3ub, :glColor3ub, [:uchar, :uchar, :uchar], :void
  
  # (Not documented)
  # 
  # @method color3ui(red, green, blue)
  # @param [Integer] red 
  # @param [Integer] green 
  # @param [Integer] blue 
  # @return [nil] 
  # @scope class
  attach_function :color3ui, :glColor3ui, [:uint, :uint, :uint], :void
  
  # (Not documented)
  # 
  # @method color3us(red, green, blue)
  # @param [Integer] red 
  # @param [Integer] green 
  # @param [Integer] blue 
  # @return [nil] 
  # @scope class
  attach_function :color3us, :glColor3us, [:ushort, :ushort, :ushort], :void
  
  # (Not documented)
  # 
  # @method color4b(red, green, blue, alpha)
  # @param [Integer] red 
  # @param [Integer] green 
  # @param [Integer] blue 
  # @param [Integer] alpha 
  # @return [nil] 
  # @scope class
  attach_function :color4b, :glColor4b, [:char, :char, :char, :char], :void
  
  # (Not documented)
  # 
  # @method color4d(red, green, blue, alpha)
  # @param [Float] red 
  # @param [Float] green 
  # @param [Float] blue 
  # @param [Float] alpha 
  # @return [nil] 
  # @scope class
  attach_function :color4d, :glColor4d, [:double, :double, :double, :double], :void
  
  # (Not documented)
  # 
  # @method color4f(red, green, blue, alpha)
  # @param [Float] red 
  # @param [Float] green 
  # @param [Float] blue 
  # @param [Float] alpha 
  # @return [nil] 
  # @scope class
  attach_function :color4f, :glColor4f, [:float, :float, :float, :float], :void
  
  # (Not documented)
  # 
  # @method color4i(red, green, blue, alpha)
  # @param [Integer] red 
  # @param [Integer] green 
  # @param [Integer] blue 
  # @param [Integer] alpha 
  # @return [nil] 
  # @scope class
  attach_function :color4i, :glColor4i, [:int, :int, :int, :int], :void
  
  # (Not documented)
  # 
  # @method color4s(red, green, blue, alpha)
  # @param [Integer] red 
  # @param [Integer] green 
  # @param [Integer] blue 
  # @param [Integer] alpha 
  # @return [nil] 
  # @scope class
  attach_function :color4s, :glColor4s, [:short, :short, :short, :short], :void
  
  # (Not documented)
  # 
  # @method color4ub(red, green, blue, alpha)
  # @param [Integer] red 
  # @param [Integer] green 
  # @param [Integer] blue 
  # @param [Integer] alpha 
  # @return [nil] 
  # @scope class
  attach_function :color4ub, :glColor4ub, [:uchar, :uchar, :uchar, :uchar], :void
  
  # (Not documented)
  # 
  # @method color4ui(red, green, blue, alpha)
  # @param [Integer] red 
  # @param [Integer] green 
  # @param [Integer] blue 
  # @param [Integer] alpha 
  # @return [nil] 
  # @scope class
  attach_function :color4ui, :glColor4ui, [:uint, :uint, :uint, :uint], :void
  
  # (Not documented)
  # 
  # @method color4us(red, green, blue, alpha)
  # @param [Integer] red 
  # @param [Integer] green 
  # @param [Integer] blue 
  # @param [Integer] alpha 
  # @return [nil] 
  # @scope class
  attach_function :color4us, :glColor4us, [:ushort, :ushort, :ushort, :ushort], :void
  
  # (Not documented)
  # 
  # @method color3bv(v)
  # @param [FFI::Pointer(*GLbyte)] v 
  # @return [nil] 
  # @scope class
  attach_function :color3bv, :glColor3bv, [:pointer], :void
  
  # (Not documented)
  # 
  # @method color3dv(v)
  # @param [FFI::Pointer(*GLdouble)] v 
  # @return [nil] 
  # @scope class
  attach_function :color3dv, :glColor3dv, [:pointer], :void
  
  # (Not documented)
  # 
  # @method color3fv(v)
  # @param [FFI::Pointer(*GLfloat)] v 
  # @return [nil] 
  # @scope class
  attach_function :color3fv, :glColor3fv, [:pointer], :void
  
  # (Not documented)
  # 
  # @method color3iv(v)
  # @param [FFI::Pointer(*GLint)] v 
  # @return [nil] 
  # @scope class
  attach_function :color3iv, :glColor3iv, [:pointer], :void
  
  # (Not documented)
  # 
  # @method color3sv(v)
  # @param [FFI::Pointer(*GLshort)] v 
  # @return [nil] 
  # @scope class
  attach_function :color3sv, :glColor3sv, [:pointer], :void
  
  # (Not documented)
  # 
  # @method color3ubv(v)
  # @param [FFI::Pointer(*GLubyte)] v 
  # @return [nil] 
  # @scope class
  attach_function :color3ubv, :glColor3ubv, [:pointer], :void
  
  # (Not documented)
  # 
  # @method color3uiv(v)
  # @param [FFI::Pointer(*GLuint)] v 
  # @return [nil] 
  # @scope class
  attach_function :color3uiv, :glColor3uiv, [:pointer], :void
  
  # (Not documented)
  # 
  # @method color3usv(v)
  # @param [FFI::Pointer(*GLushort)] v 
  # @return [nil] 
  # @scope class
  attach_function :color3usv, :glColor3usv, [:pointer], :void
  
  # (Not documented)
  # 
  # @method color4bv(v)
  # @param [FFI::Pointer(*GLbyte)] v 
  # @return [nil] 
  # @scope class
  attach_function :color4bv, :glColor4bv, [:pointer], :void
  
  # (Not documented)
  # 
  # @method color4dv(v)
  # @param [FFI::Pointer(*GLdouble)] v 
  # @return [nil] 
  # @scope class
  attach_function :color4dv, :glColor4dv, [:pointer], :void
  
  # (Not documented)
  # 
  # @method color4fv(v)
  # @param [FFI::Pointer(*GLfloat)] v 
  # @return [nil] 
  # @scope class
  attach_function :color4fv, :glColor4fv, [:pointer], :void
  
  # (Not documented)
  # 
  # @method color4iv(v)
  # @param [FFI::Pointer(*GLint)] v 
  # @return [nil] 
  # @scope class
  attach_function :color4iv, :glColor4iv, [:pointer], :void
  
  # (Not documented)
  # 
  # @method color4sv(v)
  # @param [FFI::Pointer(*GLshort)] v 
  # @return [nil] 
  # @scope class
  attach_function :color4sv, :glColor4sv, [:pointer], :void
  
  # (Not documented)
  # 
  # @method color4ubv(v)
  # @param [FFI::Pointer(*GLubyte)] v 
  # @return [nil] 
  # @scope class
  attach_function :color4ubv, :glColor4ubv, [:pointer], :void
  
  # (Not documented)
  # 
  # @method color4uiv(v)
  # @param [FFI::Pointer(*GLuint)] v 
  # @return [nil] 
  # @scope class
  attach_function :color4uiv, :glColor4uiv, [:pointer], :void
  
  # (Not documented)
  # 
  # @method color4usv(v)
  # @param [FFI::Pointer(*GLushort)] v 
  # @return [nil] 
  # @scope class
  attach_function :color4usv, :glColor4usv, [:pointer], :void
  
  # (Not documented)
  # 
  # @method tex_coord1d(s)
  # @param [Float] s 
  # @return [nil] 
  # @scope class
  attach_function :tex_coord1d, :glTexCoord1d, [:double], :void
  
  # (Not documented)
  # 
  # @method tex_coord1f(s)
  # @param [Float] s 
  # @return [nil] 
  # @scope class
  attach_function :tex_coord1f, :glTexCoord1f, [:float], :void
  
  # (Not documented)
  # 
  # @method tex_coord1i(s)
  # @param [Integer] s 
  # @return [nil] 
  # @scope class
  attach_function :tex_coord1i, :glTexCoord1i, [:int], :void
  
  # (Not documented)
  # 
  # @method tex_coord1s(s)
  # @param [Integer] s 
  # @return [nil] 
  # @scope class
  attach_function :tex_coord1s, :glTexCoord1s, [:short], :void
  
  # (Not documented)
  # 
  # @method tex_coord2d(s, t)
  # @param [Float] s 
  # @param [Float] t 
  # @return [nil] 
  # @scope class
  attach_function :tex_coord2d, :glTexCoord2d, [:double, :double], :void
  
  # (Not documented)
  # 
  # @method tex_coord2f(s, t)
  # @param [Float] s 
  # @param [Float] t 
  # @return [nil] 
  # @scope class
  attach_function :tex_coord2f, :glTexCoord2f, [:float, :float], :void
  
  # (Not documented)
  # 
  # @method tex_coord2i(s, t)
  # @param [Integer] s 
  # @param [Integer] t 
  # @return [nil] 
  # @scope class
  attach_function :tex_coord2i, :glTexCoord2i, [:int, :int], :void
  
  # (Not documented)
  # 
  # @method tex_coord2s(s, t)
  # @param [Integer] s 
  # @param [Integer] t 
  # @return [nil] 
  # @scope class
  attach_function :tex_coord2s, :glTexCoord2s, [:short, :short], :void
  
  # (Not documented)
  # 
  # @method tex_coord3d(s, t, r)
  # @param [Float] s 
  # @param [Float] t 
  # @param [Float] r 
  # @return [nil] 
  # @scope class
  attach_function :tex_coord3d, :glTexCoord3d, [:double, :double, :double], :void
  
  # (Not documented)
  # 
  # @method tex_coord3f(s, t, r)
  # @param [Float] s 
  # @param [Float] t 
  # @param [Float] r 
  # @return [nil] 
  # @scope class
  attach_function :tex_coord3f, :glTexCoord3f, [:float, :float, :float], :void
  
  # (Not documented)
  # 
  # @method tex_coord3i(s, t, r)
  # @param [Integer] s 
  # @param [Integer] t 
  # @param [Integer] r 
  # @return [nil] 
  # @scope class
  attach_function :tex_coord3i, :glTexCoord3i, [:int, :int, :int], :void
  
  # (Not documented)
  # 
  # @method tex_coord3s(s, t, r)
  # @param [Integer] s 
  # @param [Integer] t 
  # @param [Integer] r 
  # @return [nil] 
  # @scope class
  attach_function :tex_coord3s, :glTexCoord3s, [:short, :short, :short], :void
  
  # (Not documented)
  # 
  # @method tex_coord4d(s, t, r, q)
  # @param [Float] s 
  # @param [Float] t 
  # @param [Float] r 
  # @param [Float] q 
  # @return [nil] 
  # @scope class
  attach_function :tex_coord4d, :glTexCoord4d, [:double, :double, :double, :double], :void
  
  # (Not documented)
  # 
  # @method tex_coord4f(s, t, r, q)
  # @param [Float] s 
  # @param [Float] t 
  # @param [Float] r 
  # @param [Float] q 
  # @return [nil] 
  # @scope class
  attach_function :tex_coord4f, :glTexCoord4f, [:float, :float, :float, :float], :void
  
  # (Not documented)
  # 
  # @method tex_coord4i(s, t, r, q)
  # @param [Integer] s 
  # @param [Integer] t 
  # @param [Integer] r 
  # @param [Integer] q 
  # @return [nil] 
  # @scope class
  attach_function :tex_coord4i, :glTexCoord4i, [:int, :int, :int, :int], :void
  
  # (Not documented)
  # 
  # @method tex_coord4s(s, t, r, q)
  # @param [Integer] s 
  # @param [Integer] t 
  # @param [Integer] r 
  # @param [Integer] q 
  # @return [nil] 
  # @scope class
  attach_function :tex_coord4s, :glTexCoord4s, [:short, :short, :short, :short], :void
  
  # (Not documented)
  # 
  # @method tex_coord1dv(v)
  # @param [FFI::Pointer(*GLdouble)] v 
  # @return [nil] 
  # @scope class
  attach_function :tex_coord1dv, :glTexCoord1dv, [:pointer], :void
  
  # (Not documented)
  # 
  # @method tex_coord1fv(v)
  # @param [FFI::Pointer(*GLfloat)] v 
  # @return [nil] 
  # @scope class
  attach_function :tex_coord1fv, :glTexCoord1fv, [:pointer], :void
  
  # (Not documented)
  # 
  # @method tex_coord1iv(v)
  # @param [FFI::Pointer(*GLint)] v 
  # @return [nil] 
  # @scope class
  attach_function :tex_coord1iv, :glTexCoord1iv, [:pointer], :void
  
  # (Not documented)
  # 
  # @method tex_coord1sv(v)
  # @param [FFI::Pointer(*GLshort)] v 
  # @return [nil] 
  # @scope class
  attach_function :tex_coord1sv, :glTexCoord1sv, [:pointer], :void
  
  # (Not documented)
  # 
  # @method tex_coord2dv(v)
  # @param [FFI::Pointer(*GLdouble)] v 
  # @return [nil] 
  # @scope class
  attach_function :tex_coord2dv, :glTexCoord2dv, [:pointer], :void
  
  # (Not documented)
  # 
  # @method tex_coord2fv(v)
  # @param [FFI::Pointer(*GLfloat)] v 
  # @return [nil] 
  # @scope class
  attach_function :tex_coord2fv, :glTexCoord2fv, [:pointer], :void
  
  # (Not documented)
  # 
  # @method tex_coord2iv(v)
  # @param [FFI::Pointer(*GLint)] v 
  # @return [nil] 
  # @scope class
  attach_function :tex_coord2iv, :glTexCoord2iv, [:pointer], :void
  
  # (Not documented)
  # 
  # @method tex_coord2sv(v)
  # @param [FFI::Pointer(*GLshort)] v 
  # @return [nil] 
  # @scope class
  attach_function :tex_coord2sv, :glTexCoord2sv, [:pointer], :void
  
  # (Not documented)
  # 
  # @method tex_coord3dv(v)
  # @param [FFI::Pointer(*GLdouble)] v 
  # @return [nil] 
  # @scope class
  attach_function :tex_coord3dv, :glTexCoord3dv, [:pointer], :void
  
  # (Not documented)
  # 
  # @method tex_coord3fv(v)
  # @param [FFI::Pointer(*GLfloat)] v 
  # @return [nil] 
  # @scope class
  attach_function :tex_coord3fv, :glTexCoord3fv, [:pointer], :void
  
  # (Not documented)
  # 
  # @method tex_coord3iv(v)
  # @param [FFI::Pointer(*GLint)] v 
  # @return [nil] 
  # @scope class
  attach_function :tex_coord3iv, :glTexCoord3iv, [:pointer], :void
  
  # (Not documented)
  # 
  # @method tex_coord3sv(v)
  # @param [FFI::Pointer(*GLshort)] v 
  # @return [nil] 
  # @scope class
  attach_function :tex_coord3sv, :glTexCoord3sv, [:pointer], :void
  
  # (Not documented)
  # 
  # @method tex_coord4dv(v)
  # @param [FFI::Pointer(*GLdouble)] v 
  # @return [nil] 
  # @scope class
  attach_function :tex_coord4dv, :glTexCoord4dv, [:pointer], :void
  
  # (Not documented)
  # 
  # @method tex_coord4fv(v)
  # @param [FFI::Pointer(*GLfloat)] v 
  # @return [nil] 
  # @scope class
  attach_function :tex_coord4fv, :glTexCoord4fv, [:pointer], :void
  
  # (Not documented)
  # 
  # @method tex_coord4iv(v)
  # @param [FFI::Pointer(*GLint)] v 
  # @return [nil] 
  # @scope class
  attach_function :tex_coord4iv, :glTexCoord4iv, [:pointer], :void
  
  # (Not documented)
  # 
  # @method tex_coord4sv(v)
  # @param [FFI::Pointer(*GLshort)] v 
  # @return [nil] 
  # @scope class
  attach_function :tex_coord4sv, :glTexCoord4sv, [:pointer], :void
  
  # (Not documented)
  # 
  # @method raster_pos2d(x, y)
  # @param [Float] x 
  # @param [Float] y 
  # @return [nil] 
  # @scope class
  attach_function :raster_pos2d, :glRasterPos2d, [:double, :double], :void
  
  # (Not documented)
  # 
  # @method raster_pos2f(x, y)
  # @param [Float] x 
  # @param [Float] y 
  # @return [nil] 
  # @scope class
  attach_function :raster_pos2f, :glRasterPos2f, [:float, :float], :void
  
  # (Not documented)
  # 
  # @method raster_pos2i(x, y)
  # @param [Integer] x 
  # @param [Integer] y 
  # @return [nil] 
  # @scope class
  attach_function :raster_pos2i, :glRasterPos2i, [:int, :int], :void
  
  # (Not documented)
  # 
  # @method raster_pos2s(x, y)
  # @param [Integer] x 
  # @param [Integer] y 
  # @return [nil] 
  # @scope class
  attach_function :raster_pos2s, :glRasterPos2s, [:short, :short], :void
  
  # (Not documented)
  # 
  # @method raster_pos3d(x, y, z)
  # @param [Float] x 
  # @param [Float] y 
  # @param [Float] z 
  # @return [nil] 
  # @scope class
  attach_function :raster_pos3d, :glRasterPos3d, [:double, :double, :double], :void
  
  # (Not documented)
  # 
  # @method raster_pos3f(x, y, z)
  # @param [Float] x 
  # @param [Float] y 
  # @param [Float] z 
  # @return [nil] 
  # @scope class
  attach_function :raster_pos3f, :glRasterPos3f, [:float, :float, :float], :void
  
  # (Not documented)
  # 
  # @method raster_pos3i(x, y, z)
  # @param [Integer] x 
  # @param [Integer] y 
  # @param [Integer] z 
  # @return [nil] 
  # @scope class
  attach_function :raster_pos3i, :glRasterPos3i, [:int, :int, :int], :void
  
  # (Not documented)
  # 
  # @method raster_pos3s(x, y, z)
  # @param [Integer] x 
  # @param [Integer] y 
  # @param [Integer] z 
  # @return [nil] 
  # @scope class
  attach_function :raster_pos3s, :glRasterPos3s, [:short, :short, :short], :void
  
  # (Not documented)
  # 
  # @method raster_pos4d(x, y, z, w)
  # @param [Float] x 
  # @param [Float] y 
  # @param [Float] z 
  # @param [Float] w 
  # @return [nil] 
  # @scope class
  attach_function :raster_pos4d, :glRasterPos4d, [:double, :double, :double, :double], :void
  
  # (Not documented)
  # 
  # @method raster_pos4f(x, y, z, w)
  # @param [Float] x 
  # @param [Float] y 
  # @param [Float] z 
  # @param [Float] w 
  # @return [nil] 
  # @scope class
  attach_function :raster_pos4f, :glRasterPos4f, [:float, :float, :float, :float], :void
  
  # (Not documented)
  # 
  # @method raster_pos4i(x, y, z, w)
  # @param [Integer] x 
  # @param [Integer] y 
  # @param [Integer] z 
  # @param [Integer] w 
  # @return [nil] 
  # @scope class
  attach_function :raster_pos4i, :glRasterPos4i, [:int, :int, :int, :int], :void
  
  # (Not documented)
  # 
  # @method raster_pos4s(x, y, z, w)
  # @param [Integer] x 
  # @param [Integer] y 
  # @param [Integer] z 
  # @param [Integer] w 
  # @return [nil] 
  # @scope class
  attach_function :raster_pos4s, :glRasterPos4s, [:short, :short, :short, :short], :void
  
  # (Not documented)
  # 
  # @method raster_pos2dv(v)
  # @param [FFI::Pointer(*GLdouble)] v 
  # @return [nil] 
  # @scope class
  attach_function :raster_pos2dv, :glRasterPos2dv, [:pointer], :void
  
  # (Not documented)
  # 
  # @method raster_pos2fv(v)
  # @param [FFI::Pointer(*GLfloat)] v 
  # @return [nil] 
  # @scope class
  attach_function :raster_pos2fv, :glRasterPos2fv, [:pointer], :void
  
  # (Not documented)
  # 
  # @method raster_pos2iv(v)
  # @param [FFI::Pointer(*GLint)] v 
  # @return [nil] 
  # @scope class
  attach_function :raster_pos2iv, :glRasterPos2iv, [:pointer], :void
  
  # (Not documented)
  # 
  # @method raster_pos2sv(v)
  # @param [FFI::Pointer(*GLshort)] v 
  # @return [nil] 
  # @scope class
  attach_function :raster_pos2sv, :glRasterPos2sv, [:pointer], :void
  
  # (Not documented)
  # 
  # @method raster_pos3dv(v)
  # @param [FFI::Pointer(*GLdouble)] v 
  # @return [nil] 
  # @scope class
  attach_function :raster_pos3dv, :glRasterPos3dv, [:pointer], :void
  
  # (Not documented)
  # 
  # @method raster_pos3fv(v)
  # @param [FFI::Pointer(*GLfloat)] v 
  # @return [nil] 
  # @scope class
  attach_function :raster_pos3fv, :glRasterPos3fv, [:pointer], :void
  
  # (Not documented)
  # 
  # @method raster_pos3iv(v)
  # @param [FFI::Pointer(*GLint)] v 
  # @return [nil] 
  # @scope class
  attach_function :raster_pos3iv, :glRasterPos3iv, [:pointer], :void
  
  # (Not documented)
  # 
  # @method raster_pos3sv(v)
  # @param [FFI::Pointer(*GLshort)] v 
  # @return [nil] 
  # @scope class
  attach_function :raster_pos3sv, :glRasterPos3sv, [:pointer], :void
  
  # (Not documented)
  # 
  # @method raster_pos4dv(v)
  # @param [FFI::Pointer(*GLdouble)] v 
  # @return [nil] 
  # @scope class
  attach_function :raster_pos4dv, :glRasterPos4dv, [:pointer], :void
  
  # (Not documented)
  # 
  # @method raster_pos4fv(v)
  # @param [FFI::Pointer(*GLfloat)] v 
  # @return [nil] 
  # @scope class
  attach_function :raster_pos4fv, :glRasterPos4fv, [:pointer], :void
  
  # (Not documented)
  # 
  # @method raster_pos4iv(v)
  # @param [FFI::Pointer(*GLint)] v 
  # @return [nil] 
  # @scope class
  attach_function :raster_pos4iv, :glRasterPos4iv, [:pointer], :void
  
  # (Not documented)
  # 
  # @method raster_pos4sv(v)
  # @param [FFI::Pointer(*GLshort)] v 
  # @return [nil] 
  # @scope class
  attach_function :raster_pos4sv, :glRasterPos4sv, [:pointer], :void
  
  # (Not documented)
  # 
  # @method rectd(x1, y1, x2, y2)
  # @param [Float] x1 
  # @param [Float] y1 
  # @param [Float] x2 
  # @param [Float] y2 
  # @return [nil] 
  # @scope class
  attach_function :rectd, :glRectd, [:double, :double, :double, :double], :void
  
  # (Not documented)
  # 
  # @method rectf(x1, y1, x2, y2)
  # @param [Float] x1 
  # @param [Float] y1 
  # @param [Float] x2 
  # @param [Float] y2 
  # @return [nil] 
  # @scope class
  attach_function :rectf, :glRectf, [:float, :float, :float, :float], :void
  
  # (Not documented)
  # 
  # @method recti(x1, y1, x2, y2)
  # @param [Integer] x1 
  # @param [Integer] y1 
  # @param [Integer] x2 
  # @param [Integer] y2 
  # @return [nil] 
  # @scope class
  attach_function :recti, :glRecti, [:int, :int, :int, :int], :void
  
  # (Not documented)
  # 
  # @method rects(x1, y1, x2, y2)
  # @param [Integer] x1 
  # @param [Integer] y1 
  # @param [Integer] x2 
  # @param [Integer] y2 
  # @return [nil] 
  # @scope class
  attach_function :rects, :glRects, [:short, :short, :short, :short], :void
  
  # (Not documented)
  # 
  # @method rectdv(v1, v2)
  # @param [FFI::Pointer(*GLdouble)] v1 
  # @param [FFI::Pointer(*GLdouble)] v2 
  # @return [nil] 
  # @scope class
  attach_function :rectdv, :glRectdv, [:pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method rectfv(v1, v2)
  # @param [FFI::Pointer(*GLfloat)] v1 
  # @param [FFI::Pointer(*GLfloat)] v2 
  # @return [nil] 
  # @scope class
  attach_function :rectfv, :glRectfv, [:pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method rectiv(v1, v2)
  # @param [FFI::Pointer(*GLint)] v1 
  # @param [FFI::Pointer(*GLint)] v2 
  # @return [nil] 
  # @scope class
  attach_function :rectiv, :glRectiv, [:pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method rectsv(v1, v2)
  # @param [FFI::Pointer(*GLshort)] v1 
  # @param [FFI::Pointer(*GLshort)] v2 
  # @return [nil] 
  # @scope class
  attach_function :rectsv, :glRectsv, [:pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method vertex_pointer(size, type, stride, ptr)
  # @param [Integer] size 
  # @param [Integer] type 
  # @param [Integer] stride 
  # @param [FFI::Pointer(*GLvoid)] ptr 
  # @return [nil] 
  # @scope class
  attach_function :vertex_pointer, :glVertexPointer, [:int, :uint, :int, :pointer], :void
  
  # (Not documented)
  # 
  # @method normal_pointer(type, stride, ptr)
  # @param [Integer] type 
  # @param [Integer] stride 
  # @param [FFI::Pointer(*GLvoid)] ptr 
  # @return [nil] 
  # @scope class
  attach_function :normal_pointer, :glNormalPointer, [:uint, :int, :pointer], :void
  
  # (Not documented)
  # 
  # @method color_pointer(size, type, stride, ptr)
  # @param [Integer] size 
  # @param [Integer] type 
  # @param [Integer] stride 
  # @param [FFI::Pointer(*GLvoid)] ptr 
  # @return [nil] 
  # @scope class
  attach_function :color_pointer, :glColorPointer, [:int, :uint, :int, :pointer], :void
  
  # (Not documented)
  # 
  # @method index_pointer(type, stride, ptr)
  # @param [Integer] type 
  # @param [Integer] stride 
  # @param [FFI::Pointer(*GLvoid)] ptr 
  # @return [nil] 
  # @scope class
  attach_function :index_pointer, :glIndexPointer, [:uint, :int, :pointer], :void
  
  # (Not documented)
  # 
  # @method tex_coord_pointer(size, type, stride, ptr)
  # @param [Integer] size 
  # @param [Integer] type 
  # @param [Integer] stride 
  # @param [FFI::Pointer(*GLvoid)] ptr 
  # @return [nil] 
  # @scope class
  attach_function :tex_coord_pointer, :glTexCoordPointer, [:int, :uint, :int, :pointer], :void
  
  # (Not documented)
  # 
  # @method edge_flag_pointer(stride, ptr)
  # @param [Integer] stride 
  # @param [FFI::Pointer(*GLvoid)] ptr 
  # @return [nil] 
  # @scope class
  attach_function :edge_flag_pointer, :glEdgeFlagPointer, [:int, :pointer], :void
  
  # (Not documented)
  # 
  # @method get_pointerv(pname, params)
  # @param [Integer] pname 
  # @param [FFI::Pointer(**GLvoid)] params 
  # @return [nil] 
  # @scope class
  attach_function :get_pointerv, :glGetPointerv, [:uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method array_element(i)
  # @param [Integer] i 
  # @return [nil] 
  # @scope class
  attach_function :array_element, :glArrayElement, [:int], :void
  
  # (Not documented)
  # 
  # @method draw_arrays(mode, first, count)
  # @param [Integer] mode 
  # @param [Integer] first 
  # @param [Integer] count 
  # @return [nil] 
  # @scope class
  attach_function :draw_arrays, :glDrawArrays, [:uint, :int, :int], :void
  
  # (Not documented)
  # 
  # @method draw_elements(mode, count, type, indices)
  # @param [Integer] mode 
  # @param [Integer] count 
  # @param [Integer] type 
  # @param [FFI::Pointer(*GLvoid)] indices 
  # @return [nil] 
  # @scope class
  attach_function :draw_elements, :glDrawElements, [:uint, :int, :uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method interleaved_arrays(format, stride, pointer)
  # @param [Integer] format 
  # @param [Integer] stride 
  # @param [FFI::Pointer(*GLvoid)] pointer 
  # @return [nil] 
  # @scope class
  attach_function :interleaved_arrays, :glInterleavedArrays, [:uint, :int, :pointer], :void
  
  # (Not documented)
  # 
  # @method shade_model(mode)
  # @param [Integer] mode 
  # @return [nil] 
  # @scope class
  attach_function :shade_model, :glShadeModel, [:uint], :void
  
  # (Not documented)
  # 
  # @method lightf(light, pname, param)
  # @param [Integer] light 
  # @param [Integer] pname 
  # @param [Float] param 
  # @return [nil] 
  # @scope class
  attach_function :lightf, :glLightf, [:uint, :uint, :float], :void
  
  # (Not documented)
  # 
  # @method lighti(light, pname, param)
  # @param [Integer] light 
  # @param [Integer] pname 
  # @param [Integer] param 
  # @return [nil] 
  # @scope class
  attach_function :lighti, :glLighti, [:uint, :uint, :int], :void
  
  # (Not documented)
  # 
  # @method lightfv(light, pname, params)
  # @param [Integer] light 
  # @param [Integer] pname 
  # @param [FFI::Pointer(*GLfloat)] params 
  # @return [nil] 
  # @scope class
  attach_function :lightfv, :glLightfv, [:uint, :uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method lightiv(light, pname, params)
  # @param [Integer] light 
  # @param [Integer] pname 
  # @param [FFI::Pointer(*GLint)] params 
  # @return [nil] 
  # @scope class
  attach_function :lightiv, :glLightiv, [:uint, :uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method get_lightfv(light, pname, params)
  # @param [Integer] light 
  # @param [Integer] pname 
  # @param [FFI::Pointer(*GLfloat)] params 
  # @return [nil] 
  # @scope class
  attach_function :get_lightfv, :glGetLightfv, [:uint, :uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method get_lightiv(light, pname, params)
  # @param [Integer] light 
  # @param [Integer] pname 
  # @param [FFI::Pointer(*GLint)] params 
  # @return [nil] 
  # @scope class
  attach_function :get_lightiv, :glGetLightiv, [:uint, :uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method light_modelf(pname, param)
  # @param [Integer] pname 
  # @param [Float] param 
  # @return [nil] 
  # @scope class
  attach_function :light_modelf, :glLightModelf, [:uint, :float], :void
  
  # (Not documented)
  # 
  # @method light_modeli(pname, param)
  # @param [Integer] pname 
  # @param [Integer] param 
  # @return [nil] 
  # @scope class
  attach_function :light_modeli, :glLightModeli, [:uint, :int], :void
  
  # (Not documented)
  # 
  # @method light_modelfv(pname, params)
  # @param [Integer] pname 
  # @param [FFI::Pointer(*GLfloat)] params 
  # @return [nil] 
  # @scope class
  attach_function :light_modelfv, :glLightModelfv, [:uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method light_modeliv(pname, params)
  # @param [Integer] pname 
  # @param [FFI::Pointer(*GLint)] params 
  # @return [nil] 
  # @scope class
  attach_function :light_modeliv, :glLightModeliv, [:uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method materialf(face, pname, param)
  # @param [Integer] face 
  # @param [Integer] pname 
  # @param [Float] param 
  # @return [nil] 
  # @scope class
  attach_function :materialf, :glMaterialf, [:uint, :uint, :float], :void
  
  # (Not documented)
  # 
  # @method materiali(face, pname, param)
  # @param [Integer] face 
  # @param [Integer] pname 
  # @param [Integer] param 
  # @return [nil] 
  # @scope class
  attach_function :materiali, :glMateriali, [:uint, :uint, :int], :void
  
  # (Not documented)
  # 
  # @method materialfv(face, pname, params)
  # @param [Integer] face 
  # @param [Integer] pname 
  # @param [FFI::Pointer(*GLfloat)] params 
  # @return [nil] 
  # @scope class
  attach_function :materialfv, :glMaterialfv, [:uint, :uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method materialiv(face, pname, params)
  # @param [Integer] face 
  # @param [Integer] pname 
  # @param [FFI::Pointer(*GLint)] params 
  # @return [nil] 
  # @scope class
  attach_function :materialiv, :glMaterialiv, [:uint, :uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method get_materialfv(face, pname, params)
  # @param [Integer] face 
  # @param [Integer] pname 
  # @param [FFI::Pointer(*GLfloat)] params 
  # @return [nil] 
  # @scope class
  attach_function :get_materialfv, :glGetMaterialfv, [:uint, :uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method get_materialiv(face, pname, params)
  # @param [Integer] face 
  # @param [Integer] pname 
  # @param [FFI::Pointer(*GLint)] params 
  # @return [nil] 
  # @scope class
  attach_function :get_materialiv, :glGetMaterialiv, [:uint, :uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method color_material(face, mode)
  # @param [Integer] face 
  # @param [Integer] mode 
  # @return [nil] 
  # @scope class
  attach_function :color_material, :glColorMaterial, [:uint, :uint], :void
  
  # (Not documented)
  # 
  # @method pixel_zoom(xfactor, yfactor)
  # @param [Float] xfactor 
  # @param [Float] yfactor 
  # @return [nil] 
  # @scope class
  attach_function :pixel_zoom, :glPixelZoom, [:float, :float], :void
  
  # (Not documented)
  # 
  # @method pixel_storef(pname, param)
  # @param [Integer] pname 
  # @param [Float] param 
  # @return [nil] 
  # @scope class
  attach_function :pixel_storef, :glPixelStoref, [:uint, :float], :void
  
  # (Not documented)
  # 
  # @method pixel_storei(pname, param)
  # @param [Integer] pname 
  # @param [Integer] param 
  # @return [nil] 
  # @scope class
  attach_function :pixel_storei, :glPixelStorei, [:uint, :int], :void
  
  # (Not documented)
  # 
  # @method pixel_transferf(pname, param)
  # @param [Integer] pname 
  # @param [Float] param 
  # @return [nil] 
  # @scope class
  attach_function :pixel_transferf, :glPixelTransferf, [:uint, :float], :void
  
  # (Not documented)
  # 
  # @method pixel_transferi(pname, param)
  # @param [Integer] pname 
  # @param [Integer] param 
  # @return [nil] 
  # @scope class
  attach_function :pixel_transferi, :glPixelTransferi, [:uint, :int], :void
  
  # (Not documented)
  # 
  # @method pixel_mapfv(map, mapsize, values)
  # @param [Integer] map 
  # @param [Integer] mapsize 
  # @param [FFI::Pointer(*GLfloat)] values 
  # @return [nil] 
  # @scope class
  attach_function :pixel_mapfv, :glPixelMapfv, [:uint, :int, :pointer], :void
  
  # (Not documented)
  # 
  # @method pixel_mapuiv(map, mapsize, values)
  # @param [Integer] map 
  # @param [Integer] mapsize 
  # @param [FFI::Pointer(*GLuint)] values 
  # @return [nil] 
  # @scope class
  attach_function :pixel_mapuiv, :glPixelMapuiv, [:uint, :int, :pointer], :void
  
  # (Not documented)
  # 
  # @method pixel_mapusv(map, mapsize, values)
  # @param [Integer] map 
  # @param [Integer] mapsize 
  # @param [FFI::Pointer(*GLushort)] values 
  # @return [nil] 
  # @scope class
  attach_function :pixel_mapusv, :glPixelMapusv, [:uint, :int, :pointer], :void
  
  # (Not documented)
  # 
  # @method get_pixel_mapfv(map, values)
  # @param [Integer] map 
  # @param [FFI::Pointer(*GLfloat)] values 
  # @return [nil] 
  # @scope class
  attach_function :get_pixel_mapfv, :glGetPixelMapfv, [:uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method get_pixel_mapuiv(map, values)
  # @param [Integer] map 
  # @param [FFI::Pointer(*GLuint)] values 
  # @return [nil] 
  # @scope class
  attach_function :get_pixel_mapuiv, :glGetPixelMapuiv, [:uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method get_pixel_mapusv(map, values)
  # @param [Integer] map 
  # @param [FFI::Pointer(*GLushort)] values 
  # @return [nil] 
  # @scope class
  attach_function :get_pixel_mapusv, :glGetPixelMapusv, [:uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method bitmap(width, height, xorig, yorig, xmove, ymove, bitmap)
  # @param [Integer] width 
  # @param [Integer] height 
  # @param [Float] xorig 
  # @param [Float] yorig 
  # @param [Float] xmove 
  # @param [Float] ymove 
  # @param [FFI::Pointer(*GLubyte)] bitmap 
  # @return [nil] 
  # @scope class
  attach_function :bitmap, :glBitmap, [:int, :int, :float, :float, :float, :float, :pointer], :void
  
  # (Not documented)
  # 
  # @method read_pixels(x, y, width, height, format, type, pixels)
  # @param [Integer] x 
  # @param [Integer] y 
  # @param [Integer] width 
  # @param [Integer] height 
  # @param [Integer] format 
  # @param [Integer] type 
  # @param [FFI::Pointer(*GLvoid)] pixels 
  # @return [nil] 
  # @scope class
  attach_function :read_pixels, :glReadPixels, [:int, :int, :int, :int, :uint, :uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method draw_pixels(width, height, format, type, pixels)
  # @param [Integer] width 
  # @param [Integer] height 
  # @param [Integer] format 
  # @param [Integer] type 
  # @param [FFI::Pointer(*GLvoid)] pixels 
  # @return [nil] 
  # @scope class
  attach_function :draw_pixels, :glDrawPixels, [:int, :int, :uint, :uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method copy_pixels(x, y, width, height, type)
  # @param [Integer] x 
  # @param [Integer] y 
  # @param [Integer] width 
  # @param [Integer] height 
  # @param [Integer] type 
  # @return [nil] 
  # @scope class
  attach_function :copy_pixels, :glCopyPixels, [:int, :int, :int, :int, :uint], :void
  
  # (Not documented)
  # 
  # @method stencil_func(func, ref, mask)
  # @param [Integer] func 
  # @param [Integer] ref 
  # @param [Integer] mask 
  # @return [nil] 
  # @scope class
  attach_function :stencil_func, :glStencilFunc, [:uint, :int, :uint], :void
  
  # (Not documented)
  # 
  # @method stencil_mask(mask)
  # @param [Integer] mask 
  # @return [nil] 
  # @scope class
  attach_function :stencil_mask, :glStencilMask, [:uint], :void
  
  # (Not documented)
  # 
  # @method stencil_op(fail, zfail, zpass)
  # @param [Integer] fail 
  # @param [Integer] zfail 
  # @param [Integer] zpass 
  # @return [nil] 
  # @scope class
  attach_function :stencil_op, :glStencilOp, [:uint, :uint, :uint], :void
  
  # (Not documented)
  # 
  # @method clear_stencil(s)
  # @param [Integer] s 
  # @return [nil] 
  # @scope class
  attach_function :clear_stencil, :glClearStencil, [:int], :void
  
  # (Not documented)
  # 
  # @method tex_gend(coord, pname, param)
  # @param [Integer] coord 
  # @param [Integer] pname 
  # @param [Float] param 
  # @return [nil] 
  # @scope class
  attach_function :tex_gend, :glTexGend, [:uint, :uint, :double], :void
  
  # (Not documented)
  # 
  # @method tex_genf(coord, pname, param)
  # @param [Integer] coord 
  # @param [Integer] pname 
  # @param [Float] param 
  # @return [nil] 
  # @scope class
  attach_function :tex_genf, :glTexGenf, [:uint, :uint, :float], :void
  
  # (Not documented)
  # 
  # @method tex_geni(coord, pname, param)
  # @param [Integer] coord 
  # @param [Integer] pname 
  # @param [Integer] param 
  # @return [nil] 
  # @scope class
  attach_function :tex_geni, :glTexGeni, [:uint, :uint, :int], :void
  
  # (Not documented)
  # 
  # @method tex_gendv(coord, pname, params)
  # @param [Integer] coord 
  # @param [Integer] pname 
  # @param [FFI::Pointer(*GLdouble)] params 
  # @return [nil] 
  # @scope class
  attach_function :tex_gendv, :glTexGendv, [:uint, :uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method tex_genfv(coord, pname, params)
  # @param [Integer] coord 
  # @param [Integer] pname 
  # @param [FFI::Pointer(*GLfloat)] params 
  # @return [nil] 
  # @scope class
  attach_function :tex_genfv, :glTexGenfv, [:uint, :uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method tex_geniv(coord, pname, params)
  # @param [Integer] coord 
  # @param [Integer] pname 
  # @param [FFI::Pointer(*GLint)] params 
  # @return [nil] 
  # @scope class
  attach_function :tex_geniv, :glTexGeniv, [:uint, :uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method get_tex_gendv(coord, pname, params)
  # @param [Integer] coord 
  # @param [Integer] pname 
  # @param [FFI::Pointer(*GLdouble)] params 
  # @return [nil] 
  # @scope class
  attach_function :get_tex_gendv, :glGetTexGendv, [:uint, :uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method get_tex_genfv(coord, pname, params)
  # @param [Integer] coord 
  # @param [Integer] pname 
  # @param [FFI::Pointer(*GLfloat)] params 
  # @return [nil] 
  # @scope class
  attach_function :get_tex_genfv, :glGetTexGenfv, [:uint, :uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method get_tex_geniv(coord, pname, params)
  # @param [Integer] coord 
  # @param [Integer] pname 
  # @param [FFI::Pointer(*GLint)] params 
  # @return [nil] 
  # @scope class
  attach_function :get_tex_geniv, :glGetTexGeniv, [:uint, :uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method tex_envf(target, pname, param)
  # @param [Integer] target 
  # @param [Integer] pname 
  # @param [Float] param 
  # @return [nil] 
  # @scope class
  attach_function :tex_envf, :glTexEnvf, [:uint, :uint, :float], :void
  
  # (Not documented)
  # 
  # @method tex_envi(target, pname, param)
  # @param [Integer] target 
  # @param [Integer] pname 
  # @param [Integer] param 
  # @return [nil] 
  # @scope class
  attach_function :tex_envi, :glTexEnvi, [:uint, :uint, :int], :void
  
  # (Not documented)
  # 
  # @method tex_envfv(target, pname, params)
  # @param [Integer] target 
  # @param [Integer] pname 
  # @param [FFI::Pointer(*GLfloat)] params 
  # @return [nil] 
  # @scope class
  attach_function :tex_envfv, :glTexEnvfv, [:uint, :uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method tex_enviv(target, pname, params)
  # @param [Integer] target 
  # @param [Integer] pname 
  # @param [FFI::Pointer(*GLint)] params 
  # @return [nil] 
  # @scope class
  attach_function :tex_enviv, :glTexEnviv, [:uint, :uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method get_tex_envfv(target, pname, params)
  # @param [Integer] target 
  # @param [Integer] pname 
  # @param [FFI::Pointer(*GLfloat)] params 
  # @return [nil] 
  # @scope class
  attach_function :get_tex_envfv, :glGetTexEnvfv, [:uint, :uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method get_tex_enviv(target, pname, params)
  # @param [Integer] target 
  # @param [Integer] pname 
  # @param [FFI::Pointer(*GLint)] params 
  # @return [nil] 
  # @scope class
  attach_function :get_tex_enviv, :glGetTexEnviv, [:uint, :uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method tex_parameterf(target, pname, param)
  # @param [Integer] target 
  # @param [Integer] pname 
  # @param [Float] param 
  # @return [nil] 
  # @scope class
  attach_function :tex_parameterf, :glTexParameterf, [:uint, :uint, :float], :void
  
  # (Not documented)
  # 
  # @method tex_parameteri(target, pname, param)
  # @param [Integer] target 
  # @param [Integer] pname 
  # @param [Integer] param 
  # @return [nil] 
  # @scope class
  attach_function :tex_parameteri, :glTexParameteri, [:uint, :uint, :int], :void
  
  # (Not documented)
  # 
  # @method tex_parameterfv(target, pname, params)
  # @param [Integer] target 
  # @param [Integer] pname 
  # @param [FFI::Pointer(*GLfloat)] params 
  # @return [nil] 
  # @scope class
  attach_function :tex_parameterfv, :glTexParameterfv, [:uint, :uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method tex_parameteriv(target, pname, params)
  # @param [Integer] target 
  # @param [Integer] pname 
  # @param [FFI::Pointer(*GLint)] params 
  # @return [nil] 
  # @scope class
  attach_function :tex_parameteriv, :glTexParameteriv, [:uint, :uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method get_tex_parameterfv(target, pname, params)
  # @param [Integer] target 
  # @param [Integer] pname 
  # @param [FFI::Pointer(*GLfloat)] params 
  # @return [nil] 
  # @scope class
  attach_function :get_tex_parameterfv, :glGetTexParameterfv, [:uint, :uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method get_tex_parameteriv(target, pname, params)
  # @param [Integer] target 
  # @param [Integer] pname 
  # @param [FFI::Pointer(*GLint)] params 
  # @return [nil] 
  # @scope class
  attach_function :get_tex_parameteriv, :glGetTexParameteriv, [:uint, :uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method get_tex_level_parameterfv(target, level, pname, params)
  # @param [Integer] target 
  # @param [Integer] level 
  # @param [Integer] pname 
  # @param [FFI::Pointer(*GLfloat)] params 
  # @return [nil] 
  # @scope class
  attach_function :get_tex_level_parameterfv, :glGetTexLevelParameterfv, [:uint, :int, :uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method get_tex_level_parameteriv(target, level, pname, params)
  # @param [Integer] target 
  # @param [Integer] level 
  # @param [Integer] pname 
  # @param [FFI::Pointer(*GLint)] params 
  # @return [nil] 
  # @scope class
  attach_function :get_tex_level_parameteriv, :glGetTexLevelParameteriv, [:uint, :int, :uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method tex_image1d(target, level, internal_format, width, border, format, type, pixels)
  # @param [Integer] target 
  # @param [Integer] level 
  # @param [Integer] internal_format 
  # @param [Integer] width 
  # @param [Integer] border 
  # @param [Integer] format 
  # @param [Integer] type 
  # @param [FFI::Pointer(*GLvoid)] pixels 
  # @return [nil] 
  # @scope class
  attach_function :tex_image1d, :glTexImage1D, [:uint, :int, :int, :int, :int, :uint, :uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method tex_image2d(target, level, internal_format, width, height, border, format, type, pixels)
  # @param [Integer] target 
  # @param [Integer] level 
  # @param [Integer] internal_format 
  # @param [Integer] width 
  # @param [Integer] height 
  # @param [Integer] border 
  # @param [Integer] format 
  # @param [Integer] type 
  # @param [FFI::Pointer(*GLvoid)] pixels 
  # @return [nil] 
  # @scope class
  attach_function :tex_image2d, :glTexImage2D, [:uint, :int, :int, :int, :int, :int, :uint, :uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method get_tex_image(target, level, format, type, pixels)
  # @param [Integer] target 
  # @param [Integer] level 
  # @param [Integer] format 
  # @param [Integer] type 
  # @param [FFI::Pointer(*GLvoid)] pixels 
  # @return [nil] 
  # @scope class
  attach_function :get_tex_image, :glGetTexImage, [:uint, :int, :uint, :uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method gen_textures(n, textures)
  # @param [Integer] n 
  # @param [FFI::Pointer(*GLuint)] textures 
  # @return [nil] 
  # @scope class
  attach_function :gen_textures, :glGenTextures, [:int, :pointer], :void
  
  # (Not documented)
  # 
  # @method delete_textures(n, textures)
  # @param [Integer] n 
  # @param [FFI::Pointer(*GLuint)] textures 
  # @return [nil] 
  # @scope class
  attach_function :delete_textures, :glDeleteTextures, [:int, :pointer], :void
  
  # (Not documented)
  # 
  # @method bind_texture(target, texture)
  # @param [Integer] target 
  # @param [Integer] texture 
  # @return [nil] 
  # @scope class
  attach_function :bind_texture, :glBindTexture, [:uint, :uint], :void
  
  # (Not documented)
  # 
  # @method prioritize_textures(n, textures, priorities)
  # @param [Integer] n 
  # @param [FFI::Pointer(*GLuint)] textures 
  # @param [FFI::Pointer(*GLclampf)] priorities 
  # @return [nil] 
  # @scope class
  attach_function :prioritize_textures, :glPrioritizeTextures, [:int, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method are_textures_resident(n, textures, residences)
  # @param [Integer] n 
  # @param [FFI::Pointer(*GLuint)] textures 
  # @param [FFI::Pointer(*GLboolean)] residences 
  # @return [Integer] 
  # @scope class
  attach_function :are_textures_resident, :glAreTexturesResident, [:int, :pointer, :pointer], :uchar
  
  # (Not documented)
  # 
  # @method is_texture(texture)
  # @param [Integer] texture 
  # @return [Integer] 
  # @scope class
  attach_function :is_texture, :glIsTexture, [:uint], :uchar
  
  # (Not documented)
  # 
  # @method tex_sub_image1d(target, level, xoffset, width, format, type, pixels)
  # @param [Integer] target 
  # @param [Integer] level 
  # @param [Integer] xoffset 
  # @param [Integer] width 
  # @param [Integer] format 
  # @param [Integer] type 
  # @param [FFI::Pointer(*GLvoid)] pixels 
  # @return [nil] 
  # @scope class
  attach_function :tex_sub_image1d, :glTexSubImage1D, [:uint, :int, :int, :int, :uint, :uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method tex_sub_image2d(target, level, xoffset, yoffset, width, height, format, type, pixels)
  # @param [Integer] target 
  # @param [Integer] level 
  # @param [Integer] xoffset 
  # @param [Integer] yoffset 
  # @param [Integer] width 
  # @param [Integer] height 
  # @param [Integer] format 
  # @param [Integer] type 
  # @param [FFI::Pointer(*GLvoid)] pixels 
  # @return [nil] 
  # @scope class
  attach_function :tex_sub_image2d, :glTexSubImage2D, [:uint, :int, :int, :int, :int, :int, :uint, :uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method copy_tex_image1d(target, level, internalformat, x, y, width, border)
  # @param [Integer] target 
  # @param [Integer] level 
  # @param [Integer] internalformat 
  # @param [Integer] x 
  # @param [Integer] y 
  # @param [Integer] width 
  # @param [Integer] border 
  # @return [nil] 
  # @scope class
  attach_function :copy_tex_image1d, :glCopyTexImage1D, [:uint, :int, :uint, :int, :int, :int, :int], :void
  
  # (Not documented)
  # 
  # @method copy_tex_image2d(target, level, internalformat, x, y, width, height, border)
  # @param [Integer] target 
  # @param [Integer] level 
  # @param [Integer] internalformat 
  # @param [Integer] x 
  # @param [Integer] y 
  # @param [Integer] width 
  # @param [Integer] height 
  # @param [Integer] border 
  # @return [nil] 
  # @scope class
  attach_function :copy_tex_image2d, :glCopyTexImage2D, [:uint, :int, :uint, :int, :int, :int, :int, :int], :void
  
  # (Not documented)
  # 
  # @method copy_tex_sub_image1d(target, level, xoffset, x, y, width)
  # @param [Integer] target 
  # @param [Integer] level 
  # @param [Integer] xoffset 
  # @param [Integer] x 
  # @param [Integer] y 
  # @param [Integer] width 
  # @return [nil] 
  # @scope class
  attach_function :copy_tex_sub_image1d, :glCopyTexSubImage1D, [:uint, :int, :int, :int, :int, :int], :void
  
  # (Not documented)
  # 
  # @method copy_tex_sub_image2d(target, level, xoffset, yoffset, x, y, width, height)
  # @param [Integer] target 
  # @param [Integer] level 
  # @param [Integer] xoffset 
  # @param [Integer] yoffset 
  # @param [Integer] x 
  # @param [Integer] y 
  # @param [Integer] width 
  # @param [Integer] height 
  # @return [nil] 
  # @scope class
  attach_function :copy_tex_sub_image2d, :glCopyTexSubImage2D, [:uint, :int, :int, :int, :int, :int, :int, :int], :void
  
  # (Not documented)
  # 
  # @method map1d(target, u1, u2, stride, order, points)
  # @param [Integer] target 
  # @param [Float] u1 
  # @param [Float] u2 
  # @param [Integer] stride 
  # @param [Integer] order 
  # @param [FFI::Pointer(*GLdouble)] points 
  # @return [nil] 
  # @scope class
  attach_function :map1d, :glMap1d, [:uint, :double, :double, :int, :int, :pointer], :void
  
  # (Not documented)
  # 
  # @method map1f(target, u1, u2, stride, order, points)
  # @param [Integer] target 
  # @param [Float] u1 
  # @param [Float] u2 
  # @param [Integer] stride 
  # @param [Integer] order 
  # @param [FFI::Pointer(*GLfloat)] points 
  # @return [nil] 
  # @scope class
  attach_function :map1f, :glMap1f, [:uint, :float, :float, :int, :int, :pointer], :void
  
  # (Not documented)
  # 
  # @method map2d(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points)
  # @param [Integer] target 
  # @param [Float] u1 
  # @param [Float] u2 
  # @param [Integer] ustride 
  # @param [Integer] uorder 
  # @param [Float] v1 
  # @param [Float] v2 
  # @param [Integer] vstride 
  # @param [Integer] vorder 
  # @param [FFI::Pointer(*GLdouble)] points 
  # @return [nil] 
  # @scope class
  attach_function :map2d, :glMap2d, [:uint, :double, :double, :int, :int, :double, :double, :int, :int, :pointer], :void
  
  # (Not documented)
  # 
  # @method map2f(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points)
  # @param [Integer] target 
  # @param [Float] u1 
  # @param [Float] u2 
  # @param [Integer] ustride 
  # @param [Integer] uorder 
  # @param [Float] v1 
  # @param [Float] v2 
  # @param [Integer] vstride 
  # @param [Integer] vorder 
  # @param [FFI::Pointer(*GLfloat)] points 
  # @return [nil] 
  # @scope class
  attach_function :map2f, :glMap2f, [:uint, :float, :float, :int, :int, :float, :float, :int, :int, :pointer], :void
  
  # (Not documented)
  # 
  # @method get_mapdv(target, query, v)
  # @param [Integer] target 
  # @param [Integer] query 
  # @param [FFI::Pointer(*GLdouble)] v 
  # @return [nil] 
  # @scope class
  attach_function :get_mapdv, :glGetMapdv, [:uint, :uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method get_mapfv(target, query, v)
  # @param [Integer] target 
  # @param [Integer] query 
  # @param [FFI::Pointer(*GLfloat)] v 
  # @return [nil] 
  # @scope class
  attach_function :get_mapfv, :glGetMapfv, [:uint, :uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method get_mapiv(target, query, v)
  # @param [Integer] target 
  # @param [Integer] query 
  # @param [FFI::Pointer(*GLint)] v 
  # @return [nil] 
  # @scope class
  attach_function :get_mapiv, :glGetMapiv, [:uint, :uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method eval_coord1d(u)
  # @param [Float] u 
  # @return [nil] 
  # @scope class
  attach_function :eval_coord1d, :glEvalCoord1d, [:double], :void
  
  # (Not documented)
  # 
  # @method eval_coord1f(u)
  # @param [Float] u 
  # @return [nil] 
  # @scope class
  attach_function :eval_coord1f, :glEvalCoord1f, [:float], :void
  
  # (Not documented)
  # 
  # @method eval_coord1dv(u)
  # @param [FFI::Pointer(*GLdouble)] u 
  # @return [nil] 
  # @scope class
  attach_function :eval_coord1dv, :glEvalCoord1dv, [:pointer], :void
  
  # (Not documented)
  # 
  # @method eval_coord1fv(u)
  # @param [FFI::Pointer(*GLfloat)] u 
  # @return [nil] 
  # @scope class
  attach_function :eval_coord1fv, :glEvalCoord1fv, [:pointer], :void
  
  # (Not documented)
  # 
  # @method eval_coord2d(u, v)
  # @param [Float] u 
  # @param [Float] v 
  # @return [nil] 
  # @scope class
  attach_function :eval_coord2d, :glEvalCoord2d, [:double, :double], :void
  
  # (Not documented)
  # 
  # @method eval_coord2f(u, v)
  # @param [Float] u 
  # @param [Float] v 
  # @return [nil] 
  # @scope class
  attach_function :eval_coord2f, :glEvalCoord2f, [:float, :float], :void
  
  # (Not documented)
  # 
  # @method eval_coord2dv(u)
  # @param [FFI::Pointer(*GLdouble)] u 
  # @return [nil] 
  # @scope class
  attach_function :eval_coord2dv, :glEvalCoord2dv, [:pointer], :void
  
  # (Not documented)
  # 
  # @method eval_coord2fv(u)
  # @param [FFI::Pointer(*GLfloat)] u 
  # @return [nil] 
  # @scope class
  attach_function :eval_coord2fv, :glEvalCoord2fv, [:pointer], :void
  
  # (Not documented)
  # 
  # @method map_grid1d(un, u1, u2)
  # @param [Integer] un 
  # @param [Float] u1 
  # @param [Float] u2 
  # @return [nil] 
  # @scope class
  attach_function :map_grid1d, :glMapGrid1d, [:int, :double, :double], :void
  
  # (Not documented)
  # 
  # @method map_grid1f(un, u1, u2)
  # @param [Integer] un 
  # @param [Float] u1 
  # @param [Float] u2 
  # @return [nil] 
  # @scope class
  attach_function :map_grid1f, :glMapGrid1f, [:int, :float, :float], :void
  
  # (Not documented)
  # 
  # @method map_grid2d(un, u1, u2, vn, v1, v2)
  # @param [Integer] un 
  # @param [Float] u1 
  # @param [Float] u2 
  # @param [Integer] vn 
  # @param [Float] v1 
  # @param [Float] v2 
  # @return [nil] 
  # @scope class
  attach_function :map_grid2d, :glMapGrid2d, [:int, :double, :double, :int, :double, :double], :void
  
  # (Not documented)
  # 
  # @method map_grid2f(un, u1, u2, vn, v1, v2)
  # @param [Integer] un 
  # @param [Float] u1 
  # @param [Float] u2 
  # @param [Integer] vn 
  # @param [Float] v1 
  # @param [Float] v2 
  # @return [nil] 
  # @scope class
  attach_function :map_grid2f, :glMapGrid2f, [:int, :float, :float, :int, :float, :float], :void
  
  # (Not documented)
  # 
  # @method eval_point1(i)
  # @param [Integer] i 
  # @return [nil] 
  # @scope class
  attach_function :eval_point1, :glEvalPoint1, [:int], :void
  
  # (Not documented)
  # 
  # @method eval_point2(i, j)
  # @param [Integer] i 
  # @param [Integer] j 
  # @return [nil] 
  # @scope class
  attach_function :eval_point2, :glEvalPoint2, [:int, :int], :void
  
  # (Not documented)
  # 
  # @method eval_mesh1(mode, i1, i2)
  # @param [Integer] mode 
  # @param [Integer] i1 
  # @param [Integer] i2 
  # @return [nil] 
  # @scope class
  attach_function :eval_mesh1, :glEvalMesh1, [:uint, :int, :int], :void
  
  # (Not documented)
  # 
  # @method eval_mesh2(mode, i1, i2, j1, j2)
  # @param [Integer] mode 
  # @param [Integer] i1 
  # @param [Integer] i2 
  # @param [Integer] j1 
  # @param [Integer] j2 
  # @return [nil] 
  # @scope class
  attach_function :eval_mesh2, :glEvalMesh2, [:uint, :int, :int, :int, :int], :void
  
  # (Not documented)
  # 
  # @method fogf(pname, param)
  # @param [Integer] pname 
  # @param [Float] param 
  # @return [nil] 
  # @scope class
  attach_function :fogf, :glFogf, [:uint, :float], :void
  
  # (Not documented)
  # 
  # @method fogi(pname, param)
  # @param [Integer] pname 
  # @param [Integer] param 
  # @return [nil] 
  # @scope class
  attach_function :fogi, :glFogi, [:uint, :int], :void
  
  # (Not documented)
  # 
  # @method fogfv(pname, params)
  # @param [Integer] pname 
  # @param [FFI::Pointer(*GLfloat)] params 
  # @return [nil] 
  # @scope class
  attach_function :fogfv, :glFogfv, [:uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method fogiv(pname, params)
  # @param [Integer] pname 
  # @param [FFI::Pointer(*GLint)] params 
  # @return [nil] 
  # @scope class
  attach_function :fogiv, :glFogiv, [:uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method feedback_buffer(size, type, buffer)
  # @param [Integer] size 
  # @param [Integer] type 
  # @param [FFI::Pointer(*GLfloat)] buffer 
  # @return [nil] 
  # @scope class
  attach_function :feedback_buffer, :glFeedbackBuffer, [:int, :uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method pass_through(token)
  # @param [Float] token 
  # @return [nil] 
  # @scope class
  attach_function :pass_through, :glPassThrough, [:float], :void
  
  # (Not documented)
  # 
  # @method select_buffer(size, buffer)
  # @param [Integer] size 
  # @param [FFI::Pointer(*GLuint)] buffer 
  # @return [nil] 
  # @scope class
  attach_function :select_buffer, :glSelectBuffer, [:int, :pointer], :void
  
  # (Not documented)
  # 
  # @method init_names()
  # @return [nil] 
  # @scope class
  attach_function :init_names, :glInitNames, [], :void
  
  # (Not documented)
  # 
  # @method load_name(name)
  # @param [Integer] name 
  # @return [nil] 
  # @scope class
  attach_function :load_name, :glLoadName, [:uint], :void
  
  # (Not documented)
  # 
  # @method push_name(name)
  # @param [Integer] name 
  # @return [nil] 
  # @scope class
  attach_function :push_name, :glPushName, [:uint], :void
  
  # (Not documented)
  # 
  # @method pop_name()
  # @return [nil] 
  # @scope class
  attach_function :pop_name, :glPopName, [], :void
  
  # (Not documented)
  # 
  # @method draw_range_elements(mode, start, end, count, type, indices)
  # @param [Integer] mode 
  # @param [Integer] start 
  # @param [Integer] end 
  # @param [Integer] count 
  # @param [Integer] type 
  # @param [FFI::Pointer(*GLvoid)] indices 
  # @return [nil] 
  # @scope class
  attach_function :draw_range_elements, :glDrawRangeElements, [:uint, :uint, :uint, :int, :uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method tex_image3d(target, level, internal_format, width, height, depth, border, format, type, pixels)
  # @param [Integer] target 
  # @param [Integer] level 
  # @param [Integer] internal_format 
  # @param [Integer] width 
  # @param [Integer] height 
  # @param [Integer] depth 
  # @param [Integer] border 
  # @param [Integer] format 
  # @param [Integer] type 
  # @param [FFI::Pointer(*GLvoid)] pixels 
  # @return [nil] 
  # @scope class
  attach_function :tex_image3d, :glTexImage3D, [:uint, :int, :int, :int, :int, :int, :int, :uint, :uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method tex_sub_image3d(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels)
  # @param [Integer] target 
  # @param [Integer] level 
  # @param [Integer] xoffset 
  # @param [Integer] yoffset 
  # @param [Integer] zoffset 
  # @param [Integer] width 
  # @param [Integer] height 
  # @param [Integer] depth 
  # @param [Integer] format 
  # @param [Integer] type 
  # @param [FFI::Pointer(*GLvoid)] pixels 
  # @return [nil] 
  # @scope class
  attach_function :tex_sub_image3d, :glTexSubImage3D, [:uint, :int, :int, :int, :int, :int, :int, :int, :uint, :uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method copy_tex_sub_image3d(target, level, xoffset, yoffset, zoffset, x, y, width, height)
  # @param [Integer] target 
  # @param [Integer] level 
  # @param [Integer] xoffset 
  # @param [Integer] yoffset 
  # @param [Integer] zoffset 
  # @param [Integer] x 
  # @param [Integer] y 
  # @param [Integer] width 
  # @param [Integer] height 
  # @return [nil] 
  # @scope class
  attach_function :copy_tex_sub_image3d, :glCopyTexSubImage3D, [:uint, :int, :int, :int, :int, :int, :int, :int, :int], :void
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_pfngldrawrangeelementsproc_(start, end, count, type, indices)
  # @param [Integer] start 
  # @param [Integer] end 
  # @param [Integer] count 
  # @param [Integer] type 
  # @param [FFI::Pointer(*GLvoid)] indices 
  # @return [Integer] 
  # @scope class
  callback :pfngldrawrangeelementsproc, [:uint, :uint, :int, :uint, :pointer], :uint
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_pfnglteximage3dproc_(level, internalformat, width, height, depth, border, format, type, pixels)
  # @param [Integer] level 
  # @param [Integer] internalformat 
  # @param [Integer] width 
  # @param [Integer] height 
  # @param [Integer] depth 
  # @param [Integer] border 
  # @param [Integer] format 
  # @param [Integer] type 
  # @param [FFI::Pointer(*GLvoid)] pixels 
  # @return [Integer] 
  # @scope class
  callback :pfnglteximage3dproc, [:int, :int, :int, :int, :int, :int, :uint, :uint, :pointer], :uint
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_pfngltexsubimage3dproc_(level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels)
  # @param [Integer] level 
  # @param [Integer] xoffset 
  # @param [Integer] yoffset 
  # @param [Integer] zoffset 
  # @param [Integer] width 
  # @param [Integer] height 
  # @param [Integer] depth 
  # @param [Integer] format 
  # @param [Integer] type 
  # @param [FFI::Pointer(*GLvoid)] pixels 
  # @return [Integer] 
  # @scope class
  callback :pfngltexsubimage3dproc, [:int, :int, :int, :int, :int, :int, :int, :uint, :uint, :pointer], :uint
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_pfnglcopytexsubimage3dproc_(level, xoffset, yoffset, zoffset, x, y, width, height)
  # @param [Integer] level 
  # @param [Integer] xoffset 
  # @param [Integer] yoffset 
  # @param [Integer] zoffset 
  # @param [Integer] x 
  # @param [Integer] y 
  # @param [Integer] width 
  # @param [Integer] height 
  # @return [Integer] 
  # @scope class
  callback :pfnglcopytexsubimage3dproc, [:int, :int, :int, :int, :int, :int, :int, :int], :uint
  
  # (Not documented)
  # 
  # @method color_table(target, internalformat, width, format, type, table)
  # @param [Integer] target 
  # @param [Integer] internalformat 
  # @param [Integer] width 
  # @param [Integer] format 
  # @param [Integer] type 
  # @param [FFI::Pointer(*GLvoid)] table 
  # @return [nil] 
  # @scope class
  attach_function :color_table, :glColorTable, [:uint, :uint, :int, :uint, :uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method color_sub_table(target, start, count, format, type, data)
  # @param [Integer] target 
  # @param [Integer] start 
  # @param [Integer] count 
  # @param [Integer] format 
  # @param [Integer] type 
  # @param [FFI::Pointer(*GLvoid)] data 
  # @return [nil] 
  # @scope class
  attach_function :color_sub_table, :glColorSubTable, [:uint, :int, :int, :uint, :uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method color_table_parameteriv(target, pname, params)
  # @param [Integer] target 
  # @param [Integer] pname 
  # @param [FFI::Pointer(*GLint)] params 
  # @return [nil] 
  # @scope class
  attach_function :color_table_parameteriv, :glColorTableParameteriv, [:uint, :uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method color_table_parameterfv(target, pname, params)
  # @param [Integer] target 
  # @param [Integer] pname 
  # @param [FFI::Pointer(*GLfloat)] params 
  # @return [nil] 
  # @scope class
  attach_function :color_table_parameterfv, :glColorTableParameterfv, [:uint, :uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method copy_color_sub_table(target, start, x, y, width)
  # @param [Integer] target 
  # @param [Integer] start 
  # @param [Integer] x 
  # @param [Integer] y 
  # @param [Integer] width 
  # @return [nil] 
  # @scope class
  attach_function :copy_color_sub_table, :glCopyColorSubTable, [:uint, :int, :int, :int, :int], :void
  
  # (Not documented)
  # 
  # @method copy_color_table(target, internalformat, x, y, width)
  # @param [Integer] target 
  # @param [Integer] internalformat 
  # @param [Integer] x 
  # @param [Integer] y 
  # @param [Integer] width 
  # @return [nil] 
  # @scope class
  attach_function :copy_color_table, :glCopyColorTable, [:uint, :uint, :int, :int, :int], :void
  
  # (Not documented)
  # 
  # @method get_color_table(target, format, type, table)
  # @param [Integer] target 
  # @param [Integer] format 
  # @param [Integer] type 
  # @param [FFI::Pointer(*GLvoid)] table 
  # @return [nil] 
  # @scope class
  attach_function :get_color_table, :glGetColorTable, [:uint, :uint, :uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method get_color_table_parameterfv(target, pname, params)
  # @param [Integer] target 
  # @param [Integer] pname 
  # @param [FFI::Pointer(*GLfloat)] params 
  # @return [nil] 
  # @scope class
  attach_function :get_color_table_parameterfv, :glGetColorTableParameterfv, [:uint, :uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method get_color_table_parameteriv(target, pname, params)
  # @param [Integer] target 
  # @param [Integer] pname 
  # @param [FFI::Pointer(*GLint)] params 
  # @return [nil] 
  # @scope class
  attach_function :get_color_table_parameteriv, :glGetColorTableParameteriv, [:uint, :uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method blend_equation(mode)
  # @param [Integer] mode 
  # @return [nil] 
  # @scope class
  attach_function :blend_equation, :glBlendEquation, [:uint], :void
  
  # (Not documented)
  # 
  # @method blend_color(red, green, blue, alpha)
  # @param [Float] red 
  # @param [Float] green 
  # @param [Float] blue 
  # @param [Float] alpha 
  # @return [nil] 
  # @scope class
  attach_function :blend_color, :glBlendColor, [:float, :float, :float, :float], :void
  
  # (Not documented)
  # 
  # @method histogram(target, width, internalformat, sink)
  # @param [Integer] target 
  # @param [Integer] width 
  # @param [Integer] internalformat 
  # @param [Integer] sink 
  # @return [nil] 
  # @scope class
  attach_function :histogram, :glHistogram, [:uint, :int, :uint, :uchar], :void
  
  # (Not documented)
  # 
  # @method reset_histogram(target)
  # @param [Integer] target 
  # @return [nil] 
  # @scope class
  attach_function :reset_histogram, :glResetHistogram, [:uint], :void
  
  # (Not documented)
  # 
  # @method get_histogram(target, reset, format, type, values)
  # @param [Integer] target 
  # @param [Integer] reset 
  # @param [Integer] format 
  # @param [Integer] type 
  # @param [FFI::Pointer(*GLvoid)] values 
  # @return [nil] 
  # @scope class
  attach_function :get_histogram, :glGetHistogram, [:uint, :uchar, :uint, :uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method get_histogram_parameterfv(target, pname, params)
  # @param [Integer] target 
  # @param [Integer] pname 
  # @param [FFI::Pointer(*GLfloat)] params 
  # @return [nil] 
  # @scope class
  attach_function :get_histogram_parameterfv, :glGetHistogramParameterfv, [:uint, :uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method get_histogram_parameteriv(target, pname, params)
  # @param [Integer] target 
  # @param [Integer] pname 
  # @param [FFI::Pointer(*GLint)] params 
  # @return [nil] 
  # @scope class
  attach_function :get_histogram_parameteriv, :glGetHistogramParameteriv, [:uint, :uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method minmax(target, internalformat, sink)
  # @param [Integer] target 
  # @param [Integer] internalformat 
  # @param [Integer] sink 
  # @return [nil] 
  # @scope class
  attach_function :minmax, :glMinmax, [:uint, :uint, :uchar], :void
  
  # (Not documented)
  # 
  # @method reset_minmax(target)
  # @param [Integer] target 
  # @return [nil] 
  # @scope class
  attach_function :reset_minmax, :glResetMinmax, [:uint], :void
  
  # (Not documented)
  # 
  # @method get_minmax(target, reset, format, types, values)
  # @param [Integer] target 
  # @param [Integer] reset 
  # @param [Integer] format 
  # @param [Integer] types 
  # @param [FFI::Pointer(*GLvoid)] values 
  # @return [nil] 
  # @scope class
  attach_function :get_minmax, :glGetMinmax, [:uint, :uchar, :uint, :uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method get_minmax_parameterfv(target, pname, params)
  # @param [Integer] target 
  # @param [Integer] pname 
  # @param [FFI::Pointer(*GLfloat)] params 
  # @return [nil] 
  # @scope class
  attach_function :get_minmax_parameterfv, :glGetMinmaxParameterfv, [:uint, :uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method get_minmax_parameteriv(target, pname, params)
  # @param [Integer] target 
  # @param [Integer] pname 
  # @param [FFI::Pointer(*GLint)] params 
  # @return [nil] 
  # @scope class
  attach_function :get_minmax_parameteriv, :glGetMinmaxParameteriv, [:uint, :uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method convolution_filter1d(target, internalformat, width, format, type, image)
  # @param [Integer] target 
  # @param [Integer] internalformat 
  # @param [Integer] width 
  # @param [Integer] format 
  # @param [Integer] type 
  # @param [FFI::Pointer(*GLvoid)] image 
  # @return [nil] 
  # @scope class
  attach_function :convolution_filter1d, :glConvolutionFilter1D, [:uint, :uint, :int, :uint, :uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method convolution_filter2d(target, internalformat, width, height, format, type, image)
  # @param [Integer] target 
  # @param [Integer] internalformat 
  # @param [Integer] width 
  # @param [Integer] height 
  # @param [Integer] format 
  # @param [Integer] type 
  # @param [FFI::Pointer(*GLvoid)] image 
  # @return [nil] 
  # @scope class
  attach_function :convolution_filter2d, :glConvolutionFilter2D, [:uint, :uint, :int, :int, :uint, :uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method convolution_parameterf(target, pname, params)
  # @param [Integer] target 
  # @param [Integer] pname 
  # @param [Float] params 
  # @return [nil] 
  # @scope class
  attach_function :convolution_parameterf, :glConvolutionParameterf, [:uint, :uint, :float], :void
  
  # (Not documented)
  # 
  # @method convolution_parameterfv(target, pname, params)
  # @param [Integer] target 
  # @param [Integer] pname 
  # @param [FFI::Pointer(*GLfloat)] params 
  # @return [nil] 
  # @scope class
  attach_function :convolution_parameterfv, :glConvolutionParameterfv, [:uint, :uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method convolution_parameteri(target, pname, params)
  # @param [Integer] target 
  # @param [Integer] pname 
  # @param [Integer] params 
  # @return [nil] 
  # @scope class
  attach_function :convolution_parameteri, :glConvolutionParameteri, [:uint, :uint, :int], :void
  
  # (Not documented)
  # 
  # @method convolution_parameteriv(target, pname, params)
  # @param [Integer] target 
  # @param [Integer] pname 
  # @param [FFI::Pointer(*GLint)] params 
  # @return [nil] 
  # @scope class
  attach_function :convolution_parameteriv, :glConvolutionParameteriv, [:uint, :uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method copy_convolution_filter1d(target, internalformat, x, y, width)
  # @param [Integer] target 
  # @param [Integer] internalformat 
  # @param [Integer] x 
  # @param [Integer] y 
  # @param [Integer] width 
  # @return [nil] 
  # @scope class
  attach_function :copy_convolution_filter1d, :glCopyConvolutionFilter1D, [:uint, :uint, :int, :int, :int], :void
  
  # (Not documented)
  # 
  # @method copy_convolution_filter2d(target, internalformat, x, y, width, height)
  # @param [Integer] target 
  # @param [Integer] internalformat 
  # @param [Integer] x 
  # @param [Integer] y 
  # @param [Integer] width 
  # @param [Integer] height 
  # @return [nil] 
  # @scope class
  attach_function :copy_convolution_filter2d, :glCopyConvolutionFilter2D, [:uint, :uint, :int, :int, :int, :int], :void
  
  # (Not documented)
  # 
  # @method get_convolution_filter(target, format, type, image)
  # @param [Integer] target 
  # @param [Integer] format 
  # @param [Integer] type 
  # @param [FFI::Pointer(*GLvoid)] image 
  # @return [nil] 
  # @scope class
  attach_function :get_convolution_filter, :glGetConvolutionFilter, [:uint, :uint, :uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method get_convolution_parameterfv(target, pname, params)
  # @param [Integer] target 
  # @param [Integer] pname 
  # @param [FFI::Pointer(*GLfloat)] params 
  # @return [nil] 
  # @scope class
  attach_function :get_convolution_parameterfv, :glGetConvolutionParameterfv, [:uint, :uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method get_convolution_parameteriv(target, pname, params)
  # @param [Integer] target 
  # @param [Integer] pname 
  # @param [FFI::Pointer(*GLint)] params 
  # @return [nil] 
  # @scope class
  attach_function :get_convolution_parameteriv, :glGetConvolutionParameteriv, [:uint, :uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method separable_filter2d(target, internalformat, width, height, format, type, row, column)
  # @param [Integer] target 
  # @param [Integer] internalformat 
  # @param [Integer] width 
  # @param [Integer] height 
  # @param [Integer] format 
  # @param [Integer] type 
  # @param [FFI::Pointer(*GLvoid)] row 
  # @param [FFI::Pointer(*GLvoid)] column 
  # @return [nil] 
  # @scope class
  attach_function :separable_filter2d, :glSeparableFilter2D, [:uint, :uint, :int, :int, :uint, :uint, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method get_separable_filter(target, format, type, row, column, span)
  # @param [Integer] target 
  # @param [Integer] format 
  # @param [Integer] type 
  # @param [FFI::Pointer(*GLvoid)] row 
  # @param [FFI::Pointer(*GLvoid)] column 
  # @param [FFI::Pointer(*GLvoid)] span 
  # @return [nil] 
  # @scope class
  attach_function :get_separable_filter, :glGetSeparableFilter, [:uint, :uint, :uint, :pointer, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_pfnglblendcolorproc_(green, blue, alpha)
  # @param [Float] green 
  # @param [Float] blue 
  # @param [Float] alpha 
  # @return [Float] 
  # @scope class
  callback :pfnglblendcolorproc, [:float, :float, :float], :float
  
  # (Not documented)
  # 
  # @method active_texture(texture)
  # @param [Integer] texture 
  # @return [nil] 
  # @scope class
  attach_function :active_texture, :glActiveTexture, [:uint], :void
  
  # (Not documented)
  # 
  # @method client_active_texture(texture)
  # @param [Integer] texture 
  # @return [nil] 
  # @scope class
  attach_function :client_active_texture, :glClientActiveTexture, [:uint], :void
  
  # (Not documented)
  # 
  # @method compressed_tex_image1d(target, level, internalformat, width, border, image_size, data)
  # @param [Integer] target 
  # @param [Integer] level 
  # @param [Integer] internalformat 
  # @param [Integer] width 
  # @param [Integer] border 
  # @param [Integer] image_size 
  # @param [FFI::Pointer(*GLvoid)] data 
  # @return [nil] 
  # @scope class
  attach_function :compressed_tex_image1d, :glCompressedTexImage1D, [:uint, :int, :uint, :int, :int, :int, :pointer], :void
  
  # (Not documented)
  # 
  # @method compressed_tex_image2d(target, level, internalformat, width, height, border, image_size, data)
  # @param [Integer] target 
  # @param [Integer] level 
  # @param [Integer] internalformat 
  # @param [Integer] width 
  # @param [Integer] height 
  # @param [Integer] border 
  # @param [Integer] image_size 
  # @param [FFI::Pointer(*GLvoid)] data 
  # @return [nil] 
  # @scope class
  attach_function :compressed_tex_image2d, :glCompressedTexImage2D, [:uint, :int, :uint, :int, :int, :int, :int, :pointer], :void
  
  # (Not documented)
  # 
  # @method compressed_tex_image3d(target, level, internalformat, width, height, depth, border, image_size, data)
  # @param [Integer] target 
  # @param [Integer] level 
  # @param [Integer] internalformat 
  # @param [Integer] width 
  # @param [Integer] height 
  # @param [Integer] depth 
  # @param [Integer] border 
  # @param [Integer] image_size 
  # @param [FFI::Pointer(*GLvoid)] data 
  # @return [nil] 
  # @scope class
  attach_function :compressed_tex_image3d, :glCompressedTexImage3D, [:uint, :int, :uint, :int, :int, :int, :int, :int, :pointer], :void
  
  # (Not documented)
  # 
  # @method compressed_tex_sub_image1d(target, level, xoffset, width, format, image_size, data)
  # @param [Integer] target 
  # @param [Integer] level 
  # @param [Integer] xoffset 
  # @param [Integer] width 
  # @param [Integer] format 
  # @param [Integer] image_size 
  # @param [FFI::Pointer(*GLvoid)] data 
  # @return [nil] 
  # @scope class
  attach_function :compressed_tex_sub_image1d, :glCompressedTexSubImage1D, [:uint, :int, :int, :int, :uint, :int, :pointer], :void
  
  # (Not documented)
  # 
  # @method compressed_tex_sub_image2d(target, level, xoffset, yoffset, width, height, format, image_size, data)
  # @param [Integer] target 
  # @param [Integer] level 
  # @param [Integer] xoffset 
  # @param [Integer] yoffset 
  # @param [Integer] width 
  # @param [Integer] height 
  # @param [Integer] format 
  # @param [Integer] image_size 
  # @param [FFI::Pointer(*GLvoid)] data 
  # @return [nil] 
  # @scope class
  attach_function :compressed_tex_sub_image2d, :glCompressedTexSubImage2D, [:uint, :int, :int, :int, :int, :int, :uint, :int, :pointer], :void
  
  # (Not documented)
  # 
  # @method compressed_tex_sub_image3d(target, level, xoffset, yoffset, zoffset, width, height, depth, format, image_size, data)
  # @param [Integer] target 
  # @param [Integer] level 
  # @param [Integer] xoffset 
  # @param [Integer] yoffset 
  # @param [Integer] zoffset 
  # @param [Integer] width 
  # @param [Integer] height 
  # @param [Integer] depth 
  # @param [Integer] format 
  # @param [Integer] image_size 
  # @param [FFI::Pointer(*GLvoid)] data 
  # @return [nil] 
  # @scope class
  attach_function :compressed_tex_sub_image3d, :glCompressedTexSubImage3D, [:uint, :int, :int, :int, :int, :int, :int, :int, :uint, :int, :pointer], :void
  
  # (Not documented)
  # 
  # @method get_compressed_tex_image(target, lod, img)
  # @param [Integer] target 
  # @param [Integer] lod 
  # @param [FFI::Pointer(*GLvoid)] img 
  # @return [nil] 
  # @scope class
  attach_function :get_compressed_tex_image, :glGetCompressedTexImage, [:uint, :int, :pointer], :void
  
  # (Not documented)
  # 
  # @method multi_tex_coord1d(target, s)
  # @param [Integer] target 
  # @param [Float] s 
  # @return [nil] 
  # @scope class
  attach_function :multi_tex_coord1d, :glMultiTexCoord1d, [:uint, :double], :void
  
  # (Not documented)
  # 
  # @method multi_tex_coord1dv(target, v)
  # @param [Integer] target 
  # @param [FFI::Pointer(*GLdouble)] v 
  # @return [nil] 
  # @scope class
  attach_function :multi_tex_coord1dv, :glMultiTexCoord1dv, [:uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method multi_tex_coord1f(target, s)
  # @param [Integer] target 
  # @param [Float] s 
  # @return [nil] 
  # @scope class
  attach_function :multi_tex_coord1f, :glMultiTexCoord1f, [:uint, :float], :void
  
  # (Not documented)
  # 
  # @method multi_tex_coord1fv(target, v)
  # @param [Integer] target 
  # @param [FFI::Pointer(*GLfloat)] v 
  # @return [nil] 
  # @scope class
  attach_function :multi_tex_coord1fv, :glMultiTexCoord1fv, [:uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method multi_tex_coord1i(target, s)
  # @param [Integer] target 
  # @param [Integer] s 
  # @return [nil] 
  # @scope class
  attach_function :multi_tex_coord1i, :glMultiTexCoord1i, [:uint, :int], :void
  
  # (Not documented)
  # 
  # @method multi_tex_coord1iv(target, v)
  # @param [Integer] target 
  # @param [FFI::Pointer(*GLint)] v 
  # @return [nil] 
  # @scope class
  attach_function :multi_tex_coord1iv, :glMultiTexCoord1iv, [:uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method multi_tex_coord1s(target, s)
  # @param [Integer] target 
  # @param [Integer] s 
  # @return [nil] 
  # @scope class
  attach_function :multi_tex_coord1s, :glMultiTexCoord1s, [:uint, :short], :void
  
  # (Not documented)
  # 
  # @method multi_tex_coord1sv(target, v)
  # @param [Integer] target 
  # @param [FFI::Pointer(*GLshort)] v 
  # @return [nil] 
  # @scope class
  attach_function :multi_tex_coord1sv, :glMultiTexCoord1sv, [:uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method multi_tex_coord2d(target, s, t)
  # @param [Integer] target 
  # @param [Float] s 
  # @param [Float] t 
  # @return [nil] 
  # @scope class
  attach_function :multi_tex_coord2d, :glMultiTexCoord2d, [:uint, :double, :double], :void
  
  # (Not documented)
  # 
  # @method multi_tex_coord2dv(target, v)
  # @param [Integer] target 
  # @param [FFI::Pointer(*GLdouble)] v 
  # @return [nil] 
  # @scope class
  attach_function :multi_tex_coord2dv, :glMultiTexCoord2dv, [:uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method multi_tex_coord2f(target, s, t)
  # @param [Integer] target 
  # @param [Float] s 
  # @param [Float] t 
  # @return [nil] 
  # @scope class
  attach_function :multi_tex_coord2f, :glMultiTexCoord2f, [:uint, :float, :float], :void
  
  # (Not documented)
  # 
  # @method multi_tex_coord2fv(target, v)
  # @param [Integer] target 
  # @param [FFI::Pointer(*GLfloat)] v 
  # @return [nil] 
  # @scope class
  attach_function :multi_tex_coord2fv, :glMultiTexCoord2fv, [:uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method multi_tex_coord2i(target, s, t)
  # @param [Integer] target 
  # @param [Integer] s 
  # @param [Integer] t 
  # @return [nil] 
  # @scope class
  attach_function :multi_tex_coord2i, :glMultiTexCoord2i, [:uint, :int, :int], :void
  
  # (Not documented)
  # 
  # @method multi_tex_coord2iv(target, v)
  # @param [Integer] target 
  # @param [FFI::Pointer(*GLint)] v 
  # @return [nil] 
  # @scope class
  attach_function :multi_tex_coord2iv, :glMultiTexCoord2iv, [:uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method multi_tex_coord2s(target, s, t)
  # @param [Integer] target 
  # @param [Integer] s 
  # @param [Integer] t 
  # @return [nil] 
  # @scope class
  attach_function :multi_tex_coord2s, :glMultiTexCoord2s, [:uint, :short, :short], :void
  
  # (Not documented)
  # 
  # @method multi_tex_coord2sv(target, v)
  # @param [Integer] target 
  # @param [FFI::Pointer(*GLshort)] v 
  # @return [nil] 
  # @scope class
  attach_function :multi_tex_coord2sv, :glMultiTexCoord2sv, [:uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method multi_tex_coord3d(target, s, t, r)
  # @param [Integer] target 
  # @param [Float] s 
  # @param [Float] t 
  # @param [Float] r 
  # @return [nil] 
  # @scope class
  attach_function :multi_tex_coord3d, :glMultiTexCoord3d, [:uint, :double, :double, :double], :void
  
  # (Not documented)
  # 
  # @method multi_tex_coord3dv(target, v)
  # @param [Integer] target 
  # @param [FFI::Pointer(*GLdouble)] v 
  # @return [nil] 
  # @scope class
  attach_function :multi_tex_coord3dv, :glMultiTexCoord3dv, [:uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method multi_tex_coord3f(target, s, t, r)
  # @param [Integer] target 
  # @param [Float] s 
  # @param [Float] t 
  # @param [Float] r 
  # @return [nil] 
  # @scope class
  attach_function :multi_tex_coord3f, :glMultiTexCoord3f, [:uint, :float, :float, :float], :void
  
  # (Not documented)
  # 
  # @method multi_tex_coord3fv(target, v)
  # @param [Integer] target 
  # @param [FFI::Pointer(*GLfloat)] v 
  # @return [nil] 
  # @scope class
  attach_function :multi_tex_coord3fv, :glMultiTexCoord3fv, [:uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method multi_tex_coord3i(target, s, t, r)
  # @param [Integer] target 
  # @param [Integer] s 
  # @param [Integer] t 
  # @param [Integer] r 
  # @return [nil] 
  # @scope class
  attach_function :multi_tex_coord3i, :glMultiTexCoord3i, [:uint, :int, :int, :int], :void
  
  # (Not documented)
  # 
  # @method multi_tex_coord3iv(target, v)
  # @param [Integer] target 
  # @param [FFI::Pointer(*GLint)] v 
  # @return [nil] 
  # @scope class
  attach_function :multi_tex_coord3iv, :glMultiTexCoord3iv, [:uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method multi_tex_coord3s(target, s, t, r)
  # @param [Integer] target 
  # @param [Integer] s 
  # @param [Integer] t 
  # @param [Integer] r 
  # @return [nil] 
  # @scope class
  attach_function :multi_tex_coord3s, :glMultiTexCoord3s, [:uint, :short, :short, :short], :void
  
  # (Not documented)
  # 
  # @method multi_tex_coord3sv(target, v)
  # @param [Integer] target 
  # @param [FFI::Pointer(*GLshort)] v 
  # @return [nil] 
  # @scope class
  attach_function :multi_tex_coord3sv, :glMultiTexCoord3sv, [:uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method multi_tex_coord4d(target, s, t, r, q)
  # @param [Integer] target 
  # @param [Float] s 
  # @param [Float] t 
  # @param [Float] r 
  # @param [Float] q 
  # @return [nil] 
  # @scope class
  attach_function :multi_tex_coord4d, :glMultiTexCoord4d, [:uint, :double, :double, :double, :double], :void
  
  # (Not documented)
  # 
  # @method multi_tex_coord4dv(target, v)
  # @param [Integer] target 
  # @param [FFI::Pointer(*GLdouble)] v 
  # @return [nil] 
  # @scope class
  attach_function :multi_tex_coord4dv, :glMultiTexCoord4dv, [:uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method multi_tex_coord4f(target, s, t, r, q)
  # @param [Integer] target 
  # @param [Float] s 
  # @param [Float] t 
  # @param [Float] r 
  # @param [Float] q 
  # @return [nil] 
  # @scope class
  attach_function :multi_tex_coord4f, :glMultiTexCoord4f, [:uint, :float, :float, :float, :float], :void
  
  # (Not documented)
  # 
  # @method multi_tex_coord4fv(target, v)
  # @param [Integer] target 
  # @param [FFI::Pointer(*GLfloat)] v 
  # @return [nil] 
  # @scope class
  attach_function :multi_tex_coord4fv, :glMultiTexCoord4fv, [:uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method multi_tex_coord4i(target, s, t, r, q)
  # @param [Integer] target 
  # @param [Integer] s 
  # @param [Integer] t 
  # @param [Integer] r 
  # @param [Integer] q 
  # @return [nil] 
  # @scope class
  attach_function :multi_tex_coord4i, :glMultiTexCoord4i, [:uint, :int, :int, :int, :int], :void
  
  # (Not documented)
  # 
  # @method multi_tex_coord4iv(target, v)
  # @param [Integer] target 
  # @param [FFI::Pointer(*GLint)] v 
  # @return [nil] 
  # @scope class
  attach_function :multi_tex_coord4iv, :glMultiTexCoord4iv, [:uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method multi_tex_coord4s(target, s, t, r, q)
  # @param [Integer] target 
  # @param [Integer] s 
  # @param [Integer] t 
  # @param [Integer] r 
  # @param [Integer] q 
  # @return [nil] 
  # @scope class
  attach_function :multi_tex_coord4s, :glMultiTexCoord4s, [:uint, :short, :short, :short, :short], :void
  
  # (Not documented)
  # 
  # @method multi_tex_coord4sv(target, v)
  # @param [Integer] target 
  # @param [FFI::Pointer(*GLshort)] v 
  # @return [nil] 
  # @scope class
  attach_function :multi_tex_coord4sv, :glMultiTexCoord4sv, [:uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method load_transpose_matrixd(m)
  # @param [Array<Float>] m 
  # @return [nil] 
  # @scope class
  attach_function :load_transpose_matrixd, :glLoadTransposeMatrixd, [[:double, 16]], :void
  
  # (Not documented)
  # 
  # @method load_transpose_matrixf(m)
  # @param [Array<Float>] m 
  # @return [nil] 
  # @scope class
  attach_function :load_transpose_matrixf, :glLoadTransposeMatrixf, [[:float, 16]], :void
  
  # (Not documented)
  # 
  # @method mult_transpose_matrixd(m)
  # @param [Array<Float>] m 
  # @return [nil] 
  # @scope class
  attach_function :mult_transpose_matrixd, :glMultTransposeMatrixd, [[:double, 16]], :void
  
  # (Not documented)
  # 
  # @method mult_transpose_matrixf(m)
  # @param [Array<Float>] m 
  # @return [nil] 
  # @scope class
  attach_function :mult_transpose_matrixf, :glMultTransposeMatrixf, [[:float, 16]], :void
  
  # (Not documented)
  # 
  # @method sample_coverage(value, invert)
  # @param [Float] value 
  # @param [Integer] invert 
  # @return [nil] 
  # @scope class
  attach_function :sample_coverage, :glSampleCoverage, [:float, :uchar], :void
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_pfnglsamplecoverageproc_(invert)
  # @param [Integer] invert 
  # @return [Float] 
  # @scope class
  callback :pfnglsamplecoverageproc, [:uchar], :float
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_pfnglcompressedteximage3dproc_(level, internalformat, width, height, depth, border, image_size, data)
  # @param [Integer] level 
  # @param [Integer] internalformat 
  # @param [Integer] width 
  # @param [Integer] height 
  # @param [Integer] depth 
  # @param [Integer] border 
  # @param [Integer] image_size 
  # @param [FFI::Pointer(*GLvoid)] data 
  # @return [Integer] 
  # @scope class
  callback :pfnglcompressedteximage3dproc, [:int, :uint, :int, :int, :int, :int, :int, :pointer], :uint
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_pfnglcompressedteximage2dproc_(level, internalformat, width, height, border, image_size, data)
  # @param [Integer] level 
  # @param [Integer] internalformat 
  # @param [Integer] width 
  # @param [Integer] height 
  # @param [Integer] border 
  # @param [Integer] image_size 
  # @param [FFI::Pointer(*GLvoid)] data 
  # @return [Integer] 
  # @scope class
  callback :pfnglcompressedteximage2dproc, [:int, :uint, :int, :int, :int, :int, :pointer], :uint
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_pfnglcompressedteximage1dproc_(level, internalformat, width, border, image_size, data)
  # @param [Integer] level 
  # @param [Integer] internalformat 
  # @param [Integer] width 
  # @param [Integer] border 
  # @param [Integer] image_size 
  # @param [FFI::Pointer(*GLvoid)] data 
  # @return [Integer] 
  # @scope class
  callback :pfnglcompressedteximage1dproc, [:int, :uint, :int, :int, :int, :pointer], :uint
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_pfnglcompressedtexsubimage3dproc_(level, xoffset, yoffset, zoffset, width, height, depth, format, image_size, data)
  # @param [Integer] level 
  # @param [Integer] xoffset 
  # @param [Integer] yoffset 
  # @param [Integer] zoffset 
  # @param [Integer] width 
  # @param [Integer] height 
  # @param [Integer] depth 
  # @param [Integer] format 
  # @param [Integer] image_size 
  # @param [FFI::Pointer(*GLvoid)] data 
  # @return [Integer] 
  # @scope class
  callback :pfnglcompressedtexsubimage3dproc, [:int, :int, :int, :int, :int, :int, :int, :uint, :int, :pointer], :uint
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_pfnglcompressedtexsubimage2dproc_(level, xoffset, yoffset, width, height, format, image_size, data)
  # @param [Integer] level 
  # @param [Integer] xoffset 
  # @param [Integer] yoffset 
  # @param [Integer] width 
  # @param [Integer] height 
  # @param [Integer] format 
  # @param [Integer] image_size 
  # @param [FFI::Pointer(*GLvoid)] data 
  # @return [Integer] 
  # @scope class
  callback :pfnglcompressedtexsubimage2dproc, [:int, :int, :int, :int, :int, :uint, :int, :pointer], :uint
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_pfnglcompressedtexsubimage1dproc_(level, xoffset, width, format, image_size, data)
  # @param [Integer] level 
  # @param [Integer] xoffset 
  # @param [Integer] width 
  # @param [Integer] format 
  # @param [Integer] image_size 
  # @param [FFI::Pointer(*GLvoid)] data 
  # @return [Integer] 
  # @scope class
  callback :pfnglcompressedtexsubimage1dproc, [:int, :int, :int, :uint, :int, :pointer], :uint
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_pfnglgetcompressedteximageproc_(level, img)
  # @param [Integer] level 
  # @param [FFI::Pointer(*GLvoid)] img 
  # @return [Integer] 
  # @scope class
  callback :pfnglgetcompressedteximageproc, [:int, :pointer], :uint
  
  # (Not documented)
  # 
  # @method active_texture_arb(texture)
  # @param [Integer] texture 
  # @return [nil] 
  # @scope class
  attach_function :active_texture_arb, :glActiveTextureARB, [:uint], :void
  
  # (Not documented)
  # 
  # @method client_active_texture_arb(texture)
  # @param [Integer] texture 
  # @return [nil] 
  # @scope class
  attach_function :client_active_texture_arb, :glClientActiveTextureARB, [:uint], :void
  
  # (Not documented)
  # 
  # @method multi_tex_coord1d_arb(target, s)
  # @param [Integer] target 
  # @param [Float] s 
  # @return [nil] 
  # @scope class
  attach_function :multi_tex_coord1d_arb, :glMultiTexCoord1dARB, [:uint, :double], :void
  
  # (Not documented)
  # 
  # @method multi_tex_coord1dv_arb(target, v)
  # @param [Integer] target 
  # @param [FFI::Pointer(*GLdouble)] v 
  # @return [nil] 
  # @scope class
  attach_function :multi_tex_coord1dv_arb, :glMultiTexCoord1dvARB, [:uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method multi_tex_coord1f_arb(target, s)
  # @param [Integer] target 
  # @param [Float] s 
  # @return [nil] 
  # @scope class
  attach_function :multi_tex_coord1f_arb, :glMultiTexCoord1fARB, [:uint, :float], :void
  
  # (Not documented)
  # 
  # @method multi_tex_coord1fv_arb(target, v)
  # @param [Integer] target 
  # @param [FFI::Pointer(*GLfloat)] v 
  # @return [nil] 
  # @scope class
  attach_function :multi_tex_coord1fv_arb, :glMultiTexCoord1fvARB, [:uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method multi_tex_coord1i_arb(target, s)
  # @param [Integer] target 
  # @param [Integer] s 
  # @return [nil] 
  # @scope class
  attach_function :multi_tex_coord1i_arb, :glMultiTexCoord1iARB, [:uint, :int], :void
  
  # (Not documented)
  # 
  # @method multi_tex_coord1iv_arb(target, v)
  # @param [Integer] target 
  # @param [FFI::Pointer(*GLint)] v 
  # @return [nil] 
  # @scope class
  attach_function :multi_tex_coord1iv_arb, :glMultiTexCoord1ivARB, [:uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method multi_tex_coord1s_arb(target, s)
  # @param [Integer] target 
  # @param [Integer] s 
  # @return [nil] 
  # @scope class
  attach_function :multi_tex_coord1s_arb, :glMultiTexCoord1sARB, [:uint, :short], :void
  
  # (Not documented)
  # 
  # @method multi_tex_coord1sv_arb(target, v)
  # @param [Integer] target 
  # @param [FFI::Pointer(*GLshort)] v 
  # @return [nil] 
  # @scope class
  attach_function :multi_tex_coord1sv_arb, :glMultiTexCoord1svARB, [:uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method multi_tex_coord2d_arb(target, s, t)
  # @param [Integer] target 
  # @param [Float] s 
  # @param [Float] t 
  # @return [nil] 
  # @scope class
  attach_function :multi_tex_coord2d_arb, :glMultiTexCoord2dARB, [:uint, :double, :double], :void
  
  # (Not documented)
  # 
  # @method multi_tex_coord2dv_arb(target, v)
  # @param [Integer] target 
  # @param [FFI::Pointer(*GLdouble)] v 
  # @return [nil] 
  # @scope class
  attach_function :multi_tex_coord2dv_arb, :glMultiTexCoord2dvARB, [:uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method multi_tex_coord2f_arb(target, s, t)
  # @param [Integer] target 
  # @param [Float] s 
  # @param [Float] t 
  # @return [nil] 
  # @scope class
  attach_function :multi_tex_coord2f_arb, :glMultiTexCoord2fARB, [:uint, :float, :float], :void
  
  # (Not documented)
  # 
  # @method multi_tex_coord2fv_arb(target, v)
  # @param [Integer] target 
  # @param [FFI::Pointer(*GLfloat)] v 
  # @return [nil] 
  # @scope class
  attach_function :multi_tex_coord2fv_arb, :glMultiTexCoord2fvARB, [:uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method multi_tex_coord2i_arb(target, s, t)
  # @param [Integer] target 
  # @param [Integer] s 
  # @param [Integer] t 
  # @return [nil] 
  # @scope class
  attach_function :multi_tex_coord2i_arb, :glMultiTexCoord2iARB, [:uint, :int, :int], :void
  
  # (Not documented)
  # 
  # @method multi_tex_coord2iv_arb(target, v)
  # @param [Integer] target 
  # @param [FFI::Pointer(*GLint)] v 
  # @return [nil] 
  # @scope class
  attach_function :multi_tex_coord2iv_arb, :glMultiTexCoord2ivARB, [:uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method multi_tex_coord2s_arb(target, s, t)
  # @param [Integer] target 
  # @param [Integer] s 
  # @param [Integer] t 
  # @return [nil] 
  # @scope class
  attach_function :multi_tex_coord2s_arb, :glMultiTexCoord2sARB, [:uint, :short, :short], :void
  
  # (Not documented)
  # 
  # @method multi_tex_coord2sv_arb(target, v)
  # @param [Integer] target 
  # @param [FFI::Pointer(*GLshort)] v 
  # @return [nil] 
  # @scope class
  attach_function :multi_tex_coord2sv_arb, :glMultiTexCoord2svARB, [:uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method multi_tex_coord3d_arb(target, s, t, r)
  # @param [Integer] target 
  # @param [Float] s 
  # @param [Float] t 
  # @param [Float] r 
  # @return [nil] 
  # @scope class
  attach_function :multi_tex_coord3d_arb, :glMultiTexCoord3dARB, [:uint, :double, :double, :double], :void
  
  # (Not documented)
  # 
  # @method multi_tex_coord3dv_arb(target, v)
  # @param [Integer] target 
  # @param [FFI::Pointer(*GLdouble)] v 
  # @return [nil] 
  # @scope class
  attach_function :multi_tex_coord3dv_arb, :glMultiTexCoord3dvARB, [:uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method multi_tex_coord3f_arb(target, s, t, r)
  # @param [Integer] target 
  # @param [Float] s 
  # @param [Float] t 
  # @param [Float] r 
  # @return [nil] 
  # @scope class
  attach_function :multi_tex_coord3f_arb, :glMultiTexCoord3fARB, [:uint, :float, :float, :float], :void
  
  # (Not documented)
  # 
  # @method multi_tex_coord3fv_arb(target, v)
  # @param [Integer] target 
  # @param [FFI::Pointer(*GLfloat)] v 
  # @return [nil] 
  # @scope class
  attach_function :multi_tex_coord3fv_arb, :glMultiTexCoord3fvARB, [:uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method multi_tex_coord3i_arb(target, s, t, r)
  # @param [Integer] target 
  # @param [Integer] s 
  # @param [Integer] t 
  # @param [Integer] r 
  # @return [nil] 
  # @scope class
  attach_function :multi_tex_coord3i_arb, :glMultiTexCoord3iARB, [:uint, :int, :int, :int], :void
  
  # (Not documented)
  # 
  # @method multi_tex_coord3iv_arb(target, v)
  # @param [Integer] target 
  # @param [FFI::Pointer(*GLint)] v 
  # @return [nil] 
  # @scope class
  attach_function :multi_tex_coord3iv_arb, :glMultiTexCoord3ivARB, [:uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method multi_tex_coord3s_arb(target, s, t, r)
  # @param [Integer] target 
  # @param [Integer] s 
  # @param [Integer] t 
  # @param [Integer] r 
  # @return [nil] 
  # @scope class
  attach_function :multi_tex_coord3s_arb, :glMultiTexCoord3sARB, [:uint, :short, :short, :short], :void
  
  # (Not documented)
  # 
  # @method multi_tex_coord3sv_arb(target, v)
  # @param [Integer] target 
  # @param [FFI::Pointer(*GLshort)] v 
  # @return [nil] 
  # @scope class
  attach_function :multi_tex_coord3sv_arb, :glMultiTexCoord3svARB, [:uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method multi_tex_coord4d_arb(target, s, t, r, q)
  # @param [Integer] target 
  # @param [Float] s 
  # @param [Float] t 
  # @param [Float] r 
  # @param [Float] q 
  # @return [nil] 
  # @scope class
  attach_function :multi_tex_coord4d_arb, :glMultiTexCoord4dARB, [:uint, :double, :double, :double, :double], :void
  
  # (Not documented)
  # 
  # @method multi_tex_coord4dv_arb(target, v)
  # @param [Integer] target 
  # @param [FFI::Pointer(*GLdouble)] v 
  # @return [nil] 
  # @scope class
  attach_function :multi_tex_coord4dv_arb, :glMultiTexCoord4dvARB, [:uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method multi_tex_coord4f_arb(target, s, t, r, q)
  # @param [Integer] target 
  # @param [Float] s 
  # @param [Float] t 
  # @param [Float] r 
  # @param [Float] q 
  # @return [nil] 
  # @scope class
  attach_function :multi_tex_coord4f_arb, :glMultiTexCoord4fARB, [:uint, :float, :float, :float, :float], :void
  
  # (Not documented)
  # 
  # @method multi_tex_coord4fv_arb(target, v)
  # @param [Integer] target 
  # @param [FFI::Pointer(*GLfloat)] v 
  # @return [nil] 
  # @scope class
  attach_function :multi_tex_coord4fv_arb, :glMultiTexCoord4fvARB, [:uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method multi_tex_coord4i_arb(target, s, t, r, q)
  # @param [Integer] target 
  # @param [Integer] s 
  # @param [Integer] t 
  # @param [Integer] r 
  # @param [Integer] q 
  # @return [nil] 
  # @scope class
  attach_function :multi_tex_coord4i_arb, :glMultiTexCoord4iARB, [:uint, :int, :int, :int, :int], :void
  
  # (Not documented)
  # 
  # @method multi_tex_coord4iv_arb(target, v)
  # @param [Integer] target 
  # @param [FFI::Pointer(*GLint)] v 
  # @return [nil] 
  # @scope class
  attach_function :multi_tex_coord4iv_arb, :glMultiTexCoord4ivARB, [:uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method multi_tex_coord4s_arb(target, s, t, r, q)
  # @param [Integer] target 
  # @param [Integer] s 
  # @param [Integer] t 
  # @param [Integer] r 
  # @param [Integer] q 
  # @return [nil] 
  # @scope class
  attach_function :multi_tex_coord4s_arb, :glMultiTexCoord4sARB, [:uint, :short, :short, :short, :short], :void
  
  # (Not documented)
  # 
  # @method multi_tex_coord4sv_arb(target, v)
  # @param [Integer] target 
  # @param [FFI::Pointer(*GLshort)] v 
  # @return [nil] 
  # @scope class
  attach_function :multi_tex_coord4sv_arb, :glMultiTexCoord4svARB, [:uint, :pointer], :void
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_pfnglmultitexcoord1darbproc_(s)
  # @param [Float] s 
  # @return [Integer] 
  # @scope class
  callback :pfnglmultitexcoord1darbproc, [:double], :uint
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_pfnglmultitexcoord1dvarbproc_(v)
  # @param [FFI::Pointer(*GLdouble)] v 
  # @return [Integer] 
  # @scope class
  callback :pfnglmultitexcoord1dvarbproc, [:pointer], :uint
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_pfnglmultitexcoord1farbproc_(s)
  # @param [Float] s 
  # @return [Integer] 
  # @scope class
  callback :pfnglmultitexcoord1farbproc, [:float], :uint
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_pfnglmultitexcoord1fvarbproc_(v)
  # @param [FFI::Pointer(*GLfloat)] v 
  # @return [Integer] 
  # @scope class
  callback :pfnglmultitexcoord1fvarbproc, [:pointer], :uint
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_pfnglmultitexcoord1iarbproc_(s)
  # @param [Integer] s 
  # @return [Integer] 
  # @scope class
  callback :pfnglmultitexcoord1iarbproc, [:int], :uint
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_pfnglmultitexcoord1ivarbproc_(v)
  # @param [FFI::Pointer(*GLint)] v 
  # @return [Integer] 
  # @scope class
  callback :pfnglmultitexcoord1ivarbproc, [:pointer], :uint
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_pfnglmultitexcoord1sarbproc_(s)
  # @param [Integer] s 
  # @return [Integer] 
  # @scope class
  callback :pfnglmultitexcoord1sarbproc, [:short], :uint
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_pfnglmultitexcoord1svarbproc_(v)
  # @param [FFI::Pointer(*GLshort)] v 
  # @return [Integer] 
  # @scope class
  callback :pfnglmultitexcoord1svarbproc, [:pointer], :uint
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_pfnglmultitexcoord2darbproc_(s, t)
  # @param [Float] s 
  # @param [Float] t 
  # @return [Integer] 
  # @scope class
  callback :pfnglmultitexcoord2darbproc, [:double, :double], :uint
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_pfnglmultitexcoord2dvarbproc_(v)
  # @param [FFI::Pointer(*GLdouble)] v 
  # @return [Integer] 
  # @scope class
  callback :pfnglmultitexcoord2dvarbproc, [:pointer], :uint
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_pfnglmultitexcoord2farbproc_(s, t)
  # @param [Float] s 
  # @param [Float] t 
  # @return [Integer] 
  # @scope class
  callback :pfnglmultitexcoord2farbproc, [:float, :float], :uint
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_pfnglmultitexcoord2fvarbproc_(v)
  # @param [FFI::Pointer(*GLfloat)] v 
  # @return [Integer] 
  # @scope class
  callback :pfnglmultitexcoord2fvarbproc, [:pointer], :uint
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_pfnglmultitexcoord2iarbproc_(s, t)
  # @param [Integer] s 
  # @param [Integer] t 
  # @return [Integer] 
  # @scope class
  callback :pfnglmultitexcoord2iarbproc, [:int, :int], :uint
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_pfnglmultitexcoord2ivarbproc_(v)
  # @param [FFI::Pointer(*GLint)] v 
  # @return [Integer] 
  # @scope class
  callback :pfnglmultitexcoord2ivarbproc, [:pointer], :uint
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_pfnglmultitexcoord2sarbproc_(s, t)
  # @param [Integer] s 
  # @param [Integer] t 
  # @return [Integer] 
  # @scope class
  callback :pfnglmultitexcoord2sarbproc, [:short, :short], :uint
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_pfnglmultitexcoord2svarbproc_(v)
  # @param [FFI::Pointer(*GLshort)] v 
  # @return [Integer] 
  # @scope class
  callback :pfnglmultitexcoord2svarbproc, [:pointer], :uint
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_pfnglmultitexcoord3darbproc_(s, t, r)
  # @param [Float] s 
  # @param [Float] t 
  # @param [Float] r 
  # @return [Integer] 
  # @scope class
  callback :pfnglmultitexcoord3darbproc, [:double, :double, :double], :uint
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_pfnglmultitexcoord3dvarbproc_(v)
  # @param [FFI::Pointer(*GLdouble)] v 
  # @return [Integer] 
  # @scope class
  callback :pfnglmultitexcoord3dvarbproc, [:pointer], :uint
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_pfnglmultitexcoord3farbproc_(s, t, r)
  # @param [Float] s 
  # @param [Float] t 
  # @param [Float] r 
  # @return [Integer] 
  # @scope class
  callback :pfnglmultitexcoord3farbproc, [:float, :float, :float], :uint
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_pfnglmultitexcoord3fvarbproc_(v)
  # @param [FFI::Pointer(*GLfloat)] v 
  # @return [Integer] 
  # @scope class
  callback :pfnglmultitexcoord3fvarbproc, [:pointer], :uint
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_pfnglmultitexcoord3iarbproc_(s, t, r)
  # @param [Integer] s 
  # @param [Integer] t 
  # @param [Integer] r 
  # @return [Integer] 
  # @scope class
  callback :pfnglmultitexcoord3iarbproc, [:int, :int, :int], :uint
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_pfnglmultitexcoord3ivarbproc_(v)
  # @param [FFI::Pointer(*GLint)] v 
  # @return [Integer] 
  # @scope class
  callback :pfnglmultitexcoord3ivarbproc, [:pointer], :uint
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_pfnglmultitexcoord3sarbproc_(s, t, r)
  # @param [Integer] s 
  # @param [Integer] t 
  # @param [Integer] r 
  # @return [Integer] 
  # @scope class
  callback :pfnglmultitexcoord3sarbproc, [:short, :short, :short], :uint
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_pfnglmultitexcoord3svarbproc_(v)
  # @param [FFI::Pointer(*GLshort)] v 
  # @return [Integer] 
  # @scope class
  callback :pfnglmultitexcoord3svarbproc, [:pointer], :uint
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_pfnglmultitexcoord4darbproc_(s, t, r, q)
  # @param [Float] s 
  # @param [Float] t 
  # @param [Float] r 
  # @param [Float] q 
  # @return [Integer] 
  # @scope class
  callback :pfnglmultitexcoord4darbproc, [:double, :double, :double, :double], :uint
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_pfnglmultitexcoord4dvarbproc_(v)
  # @param [FFI::Pointer(*GLdouble)] v 
  # @return [Integer] 
  # @scope class
  callback :pfnglmultitexcoord4dvarbproc, [:pointer], :uint
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_pfnglmultitexcoord4farbproc_(s, t, r, q)
  # @param [Float] s 
  # @param [Float] t 
  # @param [Float] r 
  # @param [Float] q 
  # @return [Integer] 
  # @scope class
  callback :pfnglmultitexcoord4farbproc, [:float, :float, :float, :float], :uint
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_pfnglmultitexcoord4fvarbproc_(v)
  # @param [FFI::Pointer(*GLfloat)] v 
  # @return [Integer] 
  # @scope class
  callback :pfnglmultitexcoord4fvarbproc, [:pointer], :uint
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_pfnglmultitexcoord4iarbproc_(s, t, r, q)
  # @param [Integer] s 
  # @param [Integer] t 
  # @param [Integer] r 
  # @param [Integer] q 
  # @return [Integer] 
  # @scope class
  callback :pfnglmultitexcoord4iarbproc, [:int, :int, :int, :int], :uint
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_pfnglmultitexcoord4ivarbproc_(v)
  # @param [FFI::Pointer(*GLint)] v 
  # @return [Integer] 
  # @scope class
  callback :pfnglmultitexcoord4ivarbproc, [:pointer], :uint
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_pfnglmultitexcoord4sarbproc_(s, t, r, q)
  # @param [Integer] s 
  # @param [Integer] t 
  # @param [Integer] r 
  # @param [Integer] q 
  # @return [Integer] 
  # @scope class
  callback :pfnglmultitexcoord4sarbproc, [:short, :short, :short, :short], :uint
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_pfnglmultitexcoord4svarbproc_(v)
  # @param [FFI::Pointer(*GLshort)] v 
  # @return [Integer] 
  # @scope class
  callback :pfnglmultitexcoord4svarbproc, [:pointer], :uint
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_pfnglblendequationseparateatiproc_(mode_a)
  # @param [Integer] mode_a 
  # @return [Integer] 
  # @scope class
  callback :pfnglblendequationseparateatiproc, [:uint], :uint
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_pfngleglimagetargettexture2doesproc_(image)
  # @param [FFI::Pointer(GLeglImageOES)] image 
  # @return [Integer] 
  # @scope class
  callback :pfngleglimagetargettexture2doesproc, [:pointer], :uint
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_pfngleglimagetargetrenderbufferstorageoesproc_(image)
  # @param [FFI::Pointer(GLeglImageOES)] image 
  # @return [Integer] 
  # @scope class
  callback :pfngleglimagetargetrenderbufferstorageoesproc, [:pointer], :uint
  
end
